title = Metric Evaluator
desc = Evaluate a set of dynamic expressions against a set of metrics, and issue a control \
	instruction with the result.

evaluationStatus.key = Last Evaluation
evaluationStatus.desc = Overview of the last evaulation.

evaluationStatus.none = <p class="mt-2">N/A</p>
evaluationStatus.error = <p class="mt-2">Evaluation @ {0}: {1}</p>
evaluationStatus.ok = <p class="mt-2">Evaluation @ {0}: <b>{1}</b> (from expression #{2})</p>
evaluationTable.head = <div class="row"><div class="col">\
	<table class="table table-sm table-striped counts"><thead>\
	<tr><th>Input</th><th>Value</th></tr>\
	</thead><tbody>
evaluationTable.row = <tr><th>{0}</th><td>{1}</td></tr>
evaluationTable.foot = </tbody></table>\
	</div></div>
evaluationInstr.result = <p>Instruction {0} with parameter <b>{1}</b> = <b>{2}</b> completed.</p>

evaluation.noExpressionServices = No expression services available.
evaluation.noExpressions = No expressions configured.
evaluation.noResult = No result produced.
evaluation.expressionSyntaxError = Error parsing expression #{0}: {1}
evaluation.expressionEvaluationError = Error evaluating expression #{0}: {1}
evaluation.noInstructionExecutionService = No InstructionExecutionService available.

status.key = Status
status.desc = Overview status on metric evaluations.
status.msg = <p class="mt-2">{0} evaluations executed, averaging {1}ms / evaluation.</p>
status.expressionNumber = Expression {0} (count)
statusTable.head = <div class="row"><div class="col">\
	<table class="table table-sm table-striped counts"><thead>\
	<tr><th>Status</th><th>Value</th></tr>\
	</thead><tbody>\
	<tr><th>Metric query time (average ms)</th><td>{0}</td></tr> \
	<tr><th>Expression execution time (average ms)</th><td>{1}</td></tr> \
	<tr><th>Instruction execution time (average ms)</th><td>{2}</td></tr> \


schedule.key = Schedule
schedule.desc = The schedule to evaluate power conditions. \
	Can be either a number representing a frequency in <b>milliseconds</b> \
	or a <a href="{0}" target="_blank">cron expression <i class="bi bi-box-arrow-up-right"></i></a>, for example <code>0 * * * * ?</code>.

requiredOperationalMode.key = Required Mode
requiredOperationalMode.desc = Require an active <a href="https://solarnetwork.github.io/solarnode-handbook/users/op-modes/" target="_blank">operational mode <i class="bi bi-box-arrow-up-right"></i></a> \
	to execute the output instruction. Can be prefixed with <code>!</code> to require the operational mode to <b>not</b> be active.

metricsValue.key = Metrics
metricsValue.desc = A comma-delimited list of metric names to use as inputs to the configured expressions.

metricAggregateTimeOffsetStartSecs.key = Aggregate Offset Start
metricAggregateTimeOffsetStartSecs.desc = The <b>seconds</b> offset start (backwards from evaluation time) to aggregate metrics over.

metricAggregateTimeOffsetEndSecs.key = Aggregate Offset End
metricAggregateTimeOffsetEndSecs.desc = The <b>seconds</b> offset end (backwards from evaluation time) to aggregate metrics over. \
	Use <code>0</code> for the evaluation time.

metricAggregatesValue.key = Aggregates
metricAggregatesValue.desc = A comma-delimited list of metric aggregate keys to query: including <code>min</code>, \
	<code>max</code>, <code>avg</code>, <code>sum</code>, <code>cnt</code> (count), and \
	<code>q:X</code> (X percentile, where X is from 1 - 99). A key can be \
	assigned a name by including <code>=N</code> where <code>N</code> is the desired name. For example \
	<code>q:25=p1</code> assigns the name <code>p1</code> to the 25th percentile aggregate.

metadataServiceUid.key = Metadata Service
metadataServiceUid.desc = The <b>Service Name</b> of the <i>Metadata Service</i> to obtain parameters from.

parametersMetadataPath.key = Parameters Metadata Path
parametersMetadataPath.desc = A metadata path that will resolve a mapping of input parameters from the configured \
	<b>Metadata Service</b>, to include in each evaluation. For example: <code>/pm/power/params</code>.

outputInstructionTopic.key = Output Instruction
outputInstructionTopic.desc = The instruction topic to use for handling the evaluation result. For example \
	<code>SetControlParameter</code>.

outputInstructionParam.key = Output Parameter
outputInstructionParam.desc = The <b>Output Instruction</b> parameter name to use for passing the evaluation result. \
	Typically this is the <b>Control ID</b> you want to handle the instruction, for example \
	<code>/power/manager/target</code>.

statLogFrequency.key = Stat Log
statLogFrequency.desc = The frequency at which to emit statistic log messages.

evaluationSourceId.key = Evaluation Source ID
evaluationSourceId.desc = An optional source ID to generate evaluation datum on. A datum will be generated \
	each time the metrics are evaluated, populated with properties for all the input parameters and the result.

paramExpressionConfigs.key = Parameter Expressions
paramExpressionConfigs.desc = A list of expression configurations that are evaluated before <b>Expressions</b> with \
	each result added as an additional input parameter.

paramExpressionConfigsItem.name.key = Parameter
paramExpressionConfigsItem.name.desc = The input parameter name to store the expression result in.

paramExpressionConfigsItem.expression.key = Expression
paramExpressionConfigsItem.expression.desc = The <a href="{0}" title="Expression language guide" target="_blank">expression <i class="bi bi-box-arrow-up-right"></i></a> to evaluate. \
	See the <a href="{1}" title="Expression guide" target="_blank">expression guide <i class="bi bi-box-arrow-up-right"></i></a> for more info.

paramExpressionConfigsItem.expressionServiceId.key = Expression Language
paramExpressionConfigsItem.expressionServiceId.desc = The expression language to write <b>Expression</b> in.

expressionConfigs.key = Expressions
expressionConfigs.desc = A list of expression configurations that are evaluated to calculate the desired \
	outcome control value. The first expression that produces a number value will be used as the result, \
	and any subsequent expressions will not be evaluated.
