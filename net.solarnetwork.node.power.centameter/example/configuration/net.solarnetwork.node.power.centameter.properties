###############################################################################
# net.solarnetwork.node.power.centameter Configuration Admin properties
###############################################################################

###############################################################################
# CentameterPowerDataSource.voltage <integer>
# 
# The constant voltage to use for the amp readings captured from the device.

CentameterPowerDataSource.voltage = 230


###############################################################################
# CentameterPowerDataSource.sourceIdFormat <string format>
# 
# A Java string format pattern for the generated sourceId value of each 
# PowerDatum. This will be passed the Centameter address as a short and
# the sensor index as an integer.

CentameterPowerDataSource.sourceIdFormat = %X.%d


###############################################################################
# CentameterPowerDataSource.multiAmpSensorIndexFlags <integer>
# 
# A bitmap flag for which amp sensors to read from. Combine sensor index values
# minus 1 (0, 1, or 2) as power-of-two values, e.g. 2^0 + 2^1 + 2^2 = 7 for 
# all three sensors.

CentameterPowerDataSource.multiAmpSensorIndexFlags = 1


###############################################################################
# CentameterPowerDataSource.addressSourceMappingValue <key/value mapping>
# 
# A key/value mapping of Centameter addresses to PowerDatum sourceId values,
# to support Centameter addresses, which can change randomly over time, getting
# collected as a stable value. The format is like
# 
# addr = sourceId, addr2 = sourceId2, ...

CentameterPowerDataSource.addressSourceMappingValue = 


###############################################################################
# CentameterPowerDataSource.sourceIdFilterValue <list>
# 
# A comma-delimited list of sourceId values to accept, rejecting all others.
# This can be used to filter out unwanted or bogus Centameter readings. Note
# the values here should be the addressSourceMappingValue values, if using
# those.

CentameterPowerDataSource.sourceIdFilterValue = 


###############################################################################
# CentameterPowerDataSource.collectAllSourceIds <boolean>
# 
# If true and sourceIdFilterValue is also configured, then try to collect
# data from all configured sources each time data is requested. There is
# no guarantee of the order of the data received from multiple Centameters,
# so this is a rough way to attempt to read from multiple Centameters each
# time data is requested. The sourceIdFilterValue property specifies a
# timeout value for attempting to collect this data.

CentameterPowerDataSource.collectAllSourceIds = true


###############################################################################
# CentameterPowerDataSource.collectAllSourceIdsTimeout <integer>
# 
# The maximum number of seconds to attempt collecting data from all configured
# sources if the collectAllSourceIds is configured as true.

CentameterPowerDataSource.collectAllSourceIdsTimeout = 30


###############################################################################
# CentameterPowerDataSource.priceSource <string>
# 
# The PriceLocation source to look up and use for prices.

CentameterPowerDataSource.priceSource = 


###############################################################################
# CentameterPowerDataSource.priceLocation <string>
# 
# The PriceLocation location to look up and use for prices.

CentameterPowerDataSource.priceLocation = 
