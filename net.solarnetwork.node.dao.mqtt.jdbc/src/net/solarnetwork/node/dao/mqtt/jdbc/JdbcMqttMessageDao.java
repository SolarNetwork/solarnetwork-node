/* ==================================================================
 * JdbcMqttMessageDao.java - 11/06/2021 4:10:17 PM
 * 
 * Copyright 2021 SolarNetwork.net Dev Team
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.node.dao.mqtt.jdbc;

import static java.lang.String.format;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Instant;
import org.springframework.jdbc.core.RowMapper;
import net.solarnetwork.common.mqtt.MqttQos;
import net.solarnetwork.common.mqtt.dao.BasicMqttMessageEntity;
import net.solarnetwork.common.mqtt.dao.MqttMessageDao;
import net.solarnetwork.common.mqtt.dao.MqttMessageEntity;
import net.solarnetwork.node.dao.jdbc.BaseJdbcBatchableDao;

/**
 * JDBC implementation of {@link MqttMessageDao}.
 * 
 * @author matt
 * @version 1.0
 */
public class JdbcMqttMessageDao extends BaseJdbcBatchableDao<MqttMessageEntity, Long>
		implements MqttMessageDao {

	/**
	 * The default SQL template for the {@code sqlGetTablesVersion} property.
	 * The {@link #getTableName()} value is used in the pattern, e.g.
	 * {@code T-init.sql}.
	 */
	public static final String SQL_GET_TABLES_VERSION_TEMPLATE = "SELECT svalue FROM solarnode.mqtt_message_meta WHERE skey = 'solarnode.%s.version'";

	/** The table name for {@link MqttMessageEntity} entities. */
	public static final String TABLE_NAME = "message";

	/** The charge point table version. */
	public static final int VERSION = 1;

	/**
	 * Enumeration of SQL resources.
	 */
	public enum SqlResource {

		/** Batch list. */
		Batch("batch"),

		/** Batch list for a specific destination. */
		BatchForDestination("batch-for-destination"),

		/** Batch update. */
		BatchUpdate("batch-update"),

		/** Batch update for a specific destination. */
		BatchUpdateForDestination("batch-update-for-destination"),

		;

		private final String resource;

		private SqlResource(String resource) {
			this.resource = resource;
		}

		/**
		 * Get the SQL resource name.
		 * 
		 * @return the resource
		 */
		public String getResource() {
			return resource;
		}
	}

	/**
	 * Constructor.
	 */
	public JdbcMqttMessageDao() {
		super(BasicMqttMessageEntity.class, Long.class, MqttMessageEntityRowMapper.INSTANCE, "mqtt_%s",
				TABLE_NAME, VERSION);
		setSqlGetTablesVersion(format(SQL_GET_TABLES_VERSION_TEMPLATE, getTableName()));
		setUseAutogeneratedKeys(true);
	}

	@Override
	protected void setStoreStatementValues(MqttMessageEntity obj, PreparedStatement ps)
			throws SQLException {
		setInstantParameter(ps, 1, obj.getCreated() != null ? obj.getCreated() : Instant.now());
		setUpdateStatementValues(obj, ps, 1);
	}

	@Override
	protected void setUpdateStatementValues(MqttMessageEntity obj, PreparedStatement ps)
			throws SQLException {
		setUpdateStatementValues(obj, ps, 0);
		ps.setObject(6, obj.getId());
	}

	protected void setUpdateStatementValues(MqttMessageEntity obj, PreparedStatement ps, int offset)
			throws SQLException {
		ps.setString(1 + offset, obj.getDestination());
		ps.setString(2 + offset, obj.getTopic());
		ps.setBoolean(3 + offset, obj.isRetained());
		ps.setInt(4 + offset, obj.getQosLevel() != null ? obj.getQosLevel().getValue()
				: MqttQos.AtMostOnce.getValue());
		ps.setBytes(5 + offset, obj.getPayload());
	}

	/**
	 * A row mapper for {@link MqttMessageEntity} entities.
	 */
	public static final class MqttMessageEntityRowMapper implements RowMapper<MqttMessageEntity> {

		public static final RowMapper<MqttMessageEntity> INSTANCE = new MqttMessageEntityRowMapper();

		@Override
		public MqttMessageEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
			Long id = rs.getLong(1);
			Instant created = getInstantColumn(rs, 2);
			String dest = rs.getString(3);
			String topic = rs.getString(4);
			boolean retained = rs.getBoolean(5);
			MqttQos qos = MqttQos.valueOf(rs.getInt(6));
			byte[] payload = rs.getBytes(7);

			return new BasicMqttMessageEntity(id, created, dest, topic, retained, qos, payload);
		}

	}

	@Override
	protected String getBatchJdbcStatement(BatchOptions options) {
		Object destFilter = (options != null && options.getParameters() != null
				? options.getParameters().get(BATCH_OPTION_DESTINATION)
				: null);
		String resource;
		if ( options != null && options.isUpdatable() ) {
			if ( destFilter != null ) {
				resource = SqlResource.BatchUpdateForDestination.getResource();
			} else {
				resource = SqlResource.BatchUpdate.getResource();
			}
		} else if ( destFilter != null ) {
			resource = SqlResource.BatchForDestination.getResource();
		} else {
			resource = SqlResource.Batch.getResource();
		}
		return getSqlResource(resource);
	}

	@Override
	protected void prepareBatchStatement(BatchOptions options, Connection con,
			PreparedStatement queryStmt) throws SQLException {
		Object destFilter = (options != null && options.getParameters() != null
				? options.getParameters().get(BATCH_OPTION_DESTINATION)
				: null);
		if ( destFilter != null ) {
			queryStmt.setString(1, destFilter.toString());
		}
	}

	@Override
	protected MqttMessageEntity getBatchRowEntity(BatchOptions options, ResultSet resultSet,
			int rowCount) throws SQLException {
		return getRowMapper().mapRow(resultSet, rowCount);
	}

	@Override
	protected void updateBatchRowEntity(BatchOptions options, ResultSet resultSet, int rowCount,
			MqttMessageEntity entity) throws SQLException {
		resultSet.updateString(3, entity.getDestination());
		resultSet.updateString(4, entity.getTopic());
		resultSet.updateBoolean(5, entity.isRetained());
		resultSet.updateInt(6, entity.getQosLevel() != null ? entity.getQosLevel().getValue()
				: MqttQos.AtMostOnce.getValue());
		resultSet.updateBytes(7, entity.getPayload());
	}

}
