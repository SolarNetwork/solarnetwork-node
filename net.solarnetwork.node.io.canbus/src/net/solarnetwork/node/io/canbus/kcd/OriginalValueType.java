//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.4 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package net.solarnetwork.node.io.canbus.kcd;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * Details of how the raw value of the signal/variable shall be
 *                 interpreted.
 * 
 * <p>Java class for ValueType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="ValueType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <attribute name="type" default="unsigned">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *             <enumeration value="unsigned"/>
 *             <enumeration value="signed"/>
 *             <enumeration value="single"/>
 *             <enumeration value="double"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="slope" type="{http://www.w3.org/2001/XMLSchema}double" default="1" />
 *       <attribute name="intercept" type="{http://www.w3.org/2001/XMLSchema}double" default="0" />
 *       <attribute name="unit" type="{http://www.w3.org/2001/XMLSchema}string" default="1" />
 *       <attribute name="min" type="{http://www.w3.org/2001/XMLSchema}double" default="0" />
 *       <attribute name="max" type="{http://www.w3.org/2001/XMLSchema}double" default="1" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlSeeAlso({
    ValueType.class
})
public class OriginalValueType {

    /**
     * Datatype of the value e.g. "unsigned","signed" or IEE754 "single",
     *                     "double".
     * 
     */
    @XmlAttribute(name = "type")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String type;
    /**
     * The slope "m" of a linear equation y = mx + b.
     * 
     */
    @XmlAttribute(name = "slope")
    protected Double slope;
    /**
     * The y-axis intercept "b" of a linear equation y = mx + b.
     * 
     */
    @XmlAttribute(name = "intercept")
    protected Double intercept;
    /**
     * Physical unit of the value written as unit term as described in
     *                     "The Unified Code for Units of Measure"
     *                     (http://unitsofmeasure.org/ucum.html)
     * 
     */
    @XmlAttribute(name = "unit")
    protected String unit;
    /**
     * Lower validity limit of the interpreted value after using the
     *                     slope/intercept equation.
     * 
     */
    @XmlAttribute(name = "min")
    protected Double min;
    /**
     * Upper validity limit of the interpreted value after using the
     *                     slope/intercept equation.
     * 
     */
    @XmlAttribute(name = "max")
    protected Double max;

    /**
     * Datatype of the value e.g. "unsigned","signed" or IEE754 "single",
     *                     "double".
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        if (type == null) {
            return "unsigned";
        } else {
            return type;
        }
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getType()
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * The slope "m" of a linear equation y = mx + b.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getSlope() {
        if (slope == null) {
            return  1.0D;
        } else {
            return slope;
        }
    }

    /**
     * Sets the value of the slope property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     * @see #getSlope()
     */
    public void setSlope(Double value) {
        this.slope = value;
    }

    /**
     * The y-axis intercept "b" of a linear equation y = mx + b.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getIntercept() {
        if (intercept == null) {
            return  0.0D;
        } else {
            return intercept;
        }
    }

    /**
     * Sets the value of the intercept property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     * @see #getIntercept()
     */
    public void setIntercept(Double value) {
        this.intercept = value;
    }

    /**
     * Physical unit of the value written as unit term as described in
     *                     "The Unified Code for Units of Measure"
     *                     (http://unitsofmeasure.org/ucum.html)
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUnit() {
        if (unit == null) {
            return "1";
        } else {
            return unit;
        }
    }

    /**
     * Sets the value of the unit property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getUnit()
     */
    public void setUnit(String value) {
        this.unit = value;
    }

    /**
     * Lower validity limit of the interpreted value after using the
     *                     slope/intercept equation.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getMin() {
        if (min == null) {
            return  0.0D;
        } else {
            return min;
        }
    }

    /**
     * Sets the value of the min property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     * @see #getMin()
     */
    public void setMin(Double value) {
        this.min = value;
    }

    /**
     * Upper validity limit of the interpreted value after using the
     *                     slope/intercept equation.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getMax() {
        if (max == null) {
            return  1.0D;
        } else {
            return max;
        }
    }

    /**
     * Sets the value of the max property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     * @see #getMax()
     */
    public void setMax(Double value) {
        this.max = value;
    }

}
