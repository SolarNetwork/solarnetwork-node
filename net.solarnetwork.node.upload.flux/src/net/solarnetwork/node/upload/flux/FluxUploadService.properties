title = SolarFlux Upload Service
desc = This component provides a way to post datum captured by SolarNode to SolarFlux (or any compatible \
	MQTT service). This is completely separate from SolarIn: datum posted to SolarFlux are not \
	persisted in SolarNetwork.

mqttHost.key = Host
mqttHost.desc = The URL to the MQTT server to use. Use <code>mqtts</code> for \
	a TLS encrypted connection, or <code>mqtt</code> for no encryption. For example: \
	<code>mqtts://influx.solarnetwork.net:8884</code>.

mqttUsername.key = Username
mqttUsername.desc = The username to connect to the MQTT server with.

mqttPassword.key = Password
mqttPassword.desc = The password to connect to the MQTT server with. <b>Note</b> that SolarNode \
	will provide its X.509 certificate on TLS connections, so a password might not be necessary.

requiredOperationalMode.key = Required Mode
requiredOperationalMode.desc = Require an active operational mode to enable publishing data. Leave empty \
	to enable publishing by default.
	
excludePropertyNamesRegex.key = Exclude Properties
excludePropertyNamesRegex.desc = An optional regular expression to globally exclude datum properties from getting \
	published. For example set to <code>_.*</code> to exclude all internal datum properties. \
	This exclusion is applied before any configured Filters.

filters.key = Filters
filters.desc = A list of dynamic filters to apply to datum, to throttle sources or filter properties.

filtersItem.key = {0}
filtersItem.desc =

filtersItem.sourceIdRegexValue.key = Source ID
filtersItem.sourceIdRegexValue.desc = A case-insensitive regular expression to match against datum <b>source ID</b> \
	values. If defined, this filter will only be applied to datum with matching source ID values. \
	If not defined this filter will be applied to all datum. \
	For example <code>^solar</code> would match any source ID starting with <b>solar</b>.

filtersItem.datumEncoderUid.key = Datum Encoder
filtersItem.datumEncoderUid.desc = The <b>Service Name</b> of the Datum Encoder component to encode the MQTT \
	payload with. If not defined, or the service is not available, then the default CBOR encoding will \
	be used. Combine with a <b>Source ID</b> filter to use the encoder only with matching source IDs.

filtersItem.frequencySeconds.key = Limit Seconds
filtersItem.frequencySeconds.desc = The minimum number of seconds to limit datum that match the configured \
	<b>Source Id</b> pattern. If datum are produced faster than this rate, they will be \
	filtered out. Set to <code>0</code> or leave empty for no limit.

filtersItem.propIncludeValues.key = Property Includes
filtersItem.propIncludeValues.desc = A list of  case-insensitive regular expressions to match against \
	datum property names. If configured, <b>only</b> properties that match one of these expressions \
	will be included in the filtered output. For example <code>^watt</code> would match any \
	property starting with <b>watt</b>.

filtersItem.propIncludeValuesItem.key = {0}
filtersItem.propIncludeValuesItem.desc = 

filtersItem.propExcludeValues.key = Property Excludes
filtersItem.propExcludeValues.desc = A list of  case-insensitive regular expressions to match against \
	datum property names. If configured, <b>any</b> property that match one of these expressions \
	will be excluded from the filtered output. For example <code>^temp</code> would match any \
	property starting with <b>temp</b>. Exclusions are applied <b>after</b> property inclusions.

filtersItem.propExcludeValuesItem.key = {0}
filtersItem.propExcludeValuesItem.desc = 
