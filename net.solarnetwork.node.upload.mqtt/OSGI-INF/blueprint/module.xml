<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- Configuration -->
	
	<osgix:cm-properties id="cfg" persistent-id="net.solarnetwork.node.upload.mqtt">
		<beans:prop key="client.keepAliveInterval">60</beans:prop>
	</osgix:cm-properties>

	<ctx:property-placeholder properties-ref="cfg"/>

	<!-- Get GeneralNodeDatumDao, which we'll wrap as a UploadServiceDatumDao -->
	<reference id="datumDao" availability="optional" interface="net.solarnetwork.node.dao.DatumDao"
		filter="(&amp;(!(mqtt=true))(mode=direct))"/>
		
	<reference id="executor" interface="java.util.concurrent.Executor" filter="(function=node)"/>
	
	<reference id="identityService" availability="optional" interface="net.solarnetwork.node.service.IdentityService"/>
	
	<reference id="mqttConnectionFactory" interface="net.solarnetwork.common.mqtt.MqttConnectionFactory"/>
	
	<bean id="eventAdmin" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="org.osgi.service.event.EventAdmin"/>
		<property name="sticky" value="true"/>
	</bean>

	<bean id="sslService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.service.SSLService"/>
		<property name="sticky" value="true"/>
	</bean>

	<bean id="reactorService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.reactor.ReactorService"/>
	</bean>

	<bean id="instructionExecutionService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.reactor.InstructionExecutionService"/>
		<property name="sticky" value="true"/>
	</bean>
	
	<bean id="datumMetadataService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.service.DatumMetadataService"/>
		<property name="sticky" value="true"/>
	</bean>

	<bean id="mqttUploadService" class="net.solarnetwork.node.upload.mqtt.MqttUploadService" 
			init-method="init" destroy-method="shutdown">
		<argument ref="mqttConnectionFactory"/>
		<argument ref="objectMapper"/>
		<argument ref="identityService"/>
		<argument ref="reactorService"/>
		<argument ref="instructionExecutionService"/>
		<argument ref="eventAdmin"/>
		<argument ref="datumMetadataService"/>
		<property name="executor" ref="executor"/>
		<property name="mqttConfig.keepAliveSeconds" value="${client.keepAliveInterval}"/>
		<property name="mqttConfig.optionalSslService" ref="sslService"/>
		<property name="messageSource">
			<bean class="org.springframework.context.support.ResourceBundleMessageSource">
				<property name="basename" value="net.solarnetwork.node.upload.mqtt.MqttUploadService"/>
			</bean>
		</property>
	</bean>

	<bean id="objectMapper" class="net.solarnetwork.codec.JsonUtils" factory-method="newDatumObjectMapper">
		<argument>
			<bean class="com.fasterxml.jackson.dataformat.cbor.CBORFactory"/>
		</argument>
	</bean>

	<!-- Publish DatumDao for GeneralNodeDatum with higher rank than generalNodeDatumDao -->
	<service ranking="100" interface="net.solarnetwork.node.dao.DatumDao">
		<service-properties>
			<entry key="datumClassName" value="net.solarnetwork.node.domain.datum.NodeDatum"/>
			<entry key="mqtt" value="true"/>
			<entry key="upload" value="false"/>
		</service-properties>
		<bean class="net.solarnetwork.node.upload.mqtt.UploadServiceDatumDao">
			<argument ref="mqttUploadService"/>
			<argument ref="datumDao"/>
		</bean>
	</service>

	<service ref="mqttUploadService" interface="net.solarnetwork.settings.SettingSpecifierProvider"/>

</blueprint>
