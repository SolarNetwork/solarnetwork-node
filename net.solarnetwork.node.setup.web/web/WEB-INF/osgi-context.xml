<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgi="http://www.eclipse.org/gemini/blueprint/schema/blueprint"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint
		http://www.eclipse.org/gemini/blueprint/schema/blueprint/gemini-blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd">

	<!-- Configuration -->

	<osgix:cm-properties id="setup.web.cfg" persistent-id="net.solarnetwork.node.setup.web">
		<prop key="mail.sender">nobody@localhost.localdomain</prop>
		<prop key="link.solaruser">https://data.solarnetwork.net/solaruser</prop>
	</osgix:cm-properties>
	
	<!-- Service References -->
	
	<osgi:reference id="objectMapperService" 
		interface="net.solarnetwork.util.ObjectMapperService"
		 filter="(function=node)"/>
	
	<osgi:reference id="transactionManager"
		interface="org.springframework.transaction.PlatformTransactionManager"
		filter="(db=node)"/>
	
	<osgi:reference id="identityService" interface="net.solarnetwork.node.IdentityService"/>
	
	<osgi:reference id="platformService" interface="net.solarnetwork.node.PlatformService"/>

	<osgi:reference id="settingDao" interface="net.solarnetwork.node.dao.SettingDao"/>	
	
	<osgi:reference id="setupService" interface="net.solarnetwork.node.setup.SetupService" availability="optional"/>
		
	<osgi:reference id="pkiService" interface="net.solarnetwork.node.setup.PKIService" availability="optional"/>
	
	<osgi:reference id="passwordEncoder" interface="org.springframework.security.crypto.password.PasswordEncoder"
		filter="(app=node)"/>
	
	<osgi:reference id="userService" interface="net.solarnetwork.node.setup.UserService"
		filter="(app=node)"/>
	
	<osgi:reference id="userDetailsService" interface="org.springframework.security.core.userdetails.UserDetailsService"
		filter="(app=node)"/>
	
	<osgi:reference id="sslServiceRef" availability="optional"
		interface="net.solarnetwork.node.SSLService">
		<osgi:reference-listener ref="sslService" bind-method="onBind" unbind-method="onUnbind"/>
	</osgi:reference>
	
	<osgi:reference id="settingsServiceRef" availability="optional"
		interface="net.solarnetwork.node.settings.SettingsService">
		<osgi:listener ref="settingsService" bind-method="onBind" unbind-method="onUnbind"/>
	</osgi:reference>
	
	<osgi:reference id="backupManagerRef" availability="optional"
		interface="net.solarnetwork.node.backup.BackupManager">
		<osgi:listener ref="backupManager" bind-method="onBind" unbind-method="onUnbind"/>
	</osgi:reference>

	<osgi:list id="nodeControlProviderList" availability="optional"
		interface="net.solarnetwork.node.NodeControlProvider"/>

	<osgi:list id="instructionHandlerList" availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionHandler"/>

	<osgi:reference id="pluginServiceRef" interface="net.solarnetwork.node.setup.PluginService" availability="optional">
		<osgi:listener ref="pluginService" bind-method="onBind" unbind-method="onUnbind"/>
	</osgi:reference>
	
	<osgi:reference id="systemServiceRef" interface="net.solarnetwork.node.SystemService" availability="optional">
		<osgi:listener ref="systemService" bind-method="onBind" unbind-method="onUnbind"/>
	</osgi:reference>
	
	<osgi:reference id="setupResourceService" availability="optional"
		interface="net.solarnetwork.node.setup.SetupResourceService"/>
	
	<!-- A SimpMessagingTemplate for the 'broker' configured for websocket messages -->
	<osgi:service interface="org.springframework.messaging.simp.SimpMessageSendingOperations">
		<osgi:service-properties>
			<entry key="channel" value="broker"/>
		</osgi:service-properties>
		<!-- The websocket:message-broker element will expose a SimpMessageSendingTemplate
		     for the broker channel automatically, but under a generated ID. As we want to 
		     expose that template as a service, use SimpMessageSendingOperationsFactoryBean to
		     get that instance via auto-wiring, then expose it as our service bean here. -->
		<bean class="net.solarnetwork.util.SimpMessageSendingOperationsFactoryBean" autowire="byType"/>
	</osgi:service>
	
</beans>
