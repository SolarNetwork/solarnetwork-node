<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-6.4.xsd">

	<http security="none" pattern="/hello" />
	
	<http security="none" pattern="/img/**"/>
	<http security="none" pattern="/css/**"/>
	<http security="none" pattern="/fonts/**"/>
	<http security="none" pattern="/webfonts/**"/>

	<!-- Support OCPP namespace explicitly. -->
	<http security="none" pattern="/ocpp/**"/>

	<!-- Stateless SNWS2 authentication realm for web services. -->
	<http pattern="/api/v1/sec/**" create-session="stateless" entry-point-ref="authTokenEntryPoint" use-expressions="true">
		<access-denied-handler ref="authTokenEntryPoint"/>
		<intercept-url pattern='/**' method="OPTIONS" access="permitAll"/>
		<intercept-url pattern='/**' access="hasRole('ROLE_USER')"/>
		<custom-filter position="PRE_AUTH_FILTER" ref="authTokenFilter"/>
		<csrf disabled="true"/>
	</http>
	
	<!-- Configure Spring Security -->
	<http auto-config="true" use-expressions="true" use-authorization-manager="false">
		<headers>
			<frame-options disabled="true"/>
		</headers>
		<intercept-url pattern='/ping' access="permitAll"/>
		<intercept-url pattern='/*.do' access="permitAll"/>
		<intercept-url pattern='/pub/**' access="permitAll"/>
	    <intercept-url pattern="/a/**" access="hasRole('ROLE_USER')"/>
	    <custom-filter ref="associationFilter" after="FIRST" />
	    <custom-filter ref="loginKeyAuthFilter" before="LOGIN_PAGE_FILTER"/>
		<form-login login-page="/login.do" default-target-url="/a/home"
			authentication-failure-url="/login.do?login_error=1"/>
		<logout logout-url="/logout" logout-success-url="/loggedout.do"/>
		<csrf request-matcher-ref="csrfIgnoreRequestMatcher"/>
	</http>
		
	<beans:bean id="sessionAuthenticationStrategy"
		class="net.solarnetwork.node.setup.web.support.SessionAuthenticationStrategyFactoryBean"/>

	<beans:bean id="loginKeyAuthFilter" class="net.solarnetwork.node.setup.web.support.LoginKeyAuthenticationFilter">
		<beans:constructor-arg ref="loginKeyHelper"/>
		<beans:property name="authenticationManager" ref="authenticationManager"/>
		<beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"/>
	</beans:bean>
		
	<beans:bean id="csrfIgnoreRequestMatcher" class="net.solarnetwork.node.setup.web.support.MethodAndIgnoreRequestMatcher">
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.web.util.matcher.NegatedRequestMatcher">
				<beans:constructor-arg>
					<beans:bean class="net.solarnetwork.node.setup.web.support.DynamicOrRequestMatcher">
						<beans:constructor-arg ref="csrfIgnoreRequestMatchers"/>
					</beans:bean>
				</beans:constructor-arg>
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean>
	
	<beans:bean id="associationFilter" class="net.solarnetwork.node.setup.web.NodeAssociationFilter">
		<beans:property name="pubPaths">
			<beans:array>
				<beans:value>/css/</beans:value>
				<beans:value>/fonts/</beans:value>
				<beans:value>/img/</beans:value>
				<beans:value>/js/</beans:value>
				<beans:value>/js-lib/</beans:value>
				<beans:value>/pub/</beans:value>
				<beans:value>/webfonts/</beans:value>
			</beans:array>
		</beans:property>
	</beans:bean>
	
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsService">			
			<password-encoder ref="passwordEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
	<websocket-message-broker>
		<intercept-message type="CONNECT" access="permitAll" />
	    <intercept-message type="UNSUBSCRIBE" access="permitAll" />
	    <intercept-message type="DISCONNECT" access="permitAll" />
	    <intercept-message pattern="/pub/**" access="permitAll" />
		<intercept-message pattern="/**" access="hasRole('USER')" />
	</websocket-message-broker>

	<!--
		This post-processor is to make XorCsrf work with messaging, see
		https://github.com/spring-projects/spring-security/issues/17260
	 -->
	<beans:bean class="net.solarnetwork.node.setup.web.support.WebsocketXorCsrfChannelBeanPostProcessor"/>

	<beans:bean id="authTokenEntryPoint" class="net.solarnetwork.web.jakarta.security.SecurityTokenAuthenticationEntryPoint">
		<beans:property name="handlerExceptionResolver" ref="exceptionHandlerExceptionResolver"/>
	</beans:bean>

	<beans:bean id="authTokenFilter" class="net.solarnetwork.node.setup.web.security.SecurityTokenAuthenticationFilter">
		<beans:property name="userDetailsService">
			<beans:bean class="net.solarnetwork.node.setup.web.security.SecurityTokenServiceUserDetailsService">
				<beans:constructor-arg ref="securityTokenService"/>
			</beans:bean>
		</beans:property>
		<beans:property name="authenticationEntryPoint" ref="authTokenEntryPoint"/>
		<beans:property name="maxRequestBodySize" value="${security.maxRequestBodySize}"/>
	</beans:bean>

</beans:beans>
