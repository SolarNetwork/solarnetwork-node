/* ==================================================================
 * JdbcModbusRegisterDao.java - 4/11/2024 9:26:09â€¯am
 *
 * Copyright 2024 SolarNetwork.net Dev Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.node.io.modbus.server.dao.jdbc;

import static java.lang.String.format;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import net.solarnetwork.dao.BasicFilterResults;
import net.solarnetwork.dao.FilterResults;
import net.solarnetwork.domain.SortDescriptor;
import net.solarnetwork.node.dao.jdbc.BaseJdbcGenericDao;
import net.solarnetwork.node.io.modbus.server.dao.ModbusRegisterDao;
import net.solarnetwork.node.io.modbus.server.dao.ModbusRegisterEntity;
import net.solarnetwork.node.io.modbus.server.dao.ModbusRegisterFilter;
import net.solarnetwork.node.io.modbus.server.dao.ModbusRegisterKey;
import net.solarnetwork.settings.SettingSpecifier;
import net.solarnetwork.settings.SettingSpecifierProvider;
import net.solarnetwork.settings.support.BasicTitleSettingSpecifier;
import net.solarnetwork.util.StatTracker;

/**
 * JDBC implementation of {@link ModbusRegisterDao}.
 *
 * @author matt
 * @version 1.3
 */
public class JdbcModbusRegisterDao extends BaseJdbcGenericDao<ModbusRegisterEntity, ModbusRegisterKey>
		implements ModbusRegisterDao, SettingSpecifierProvider {

	/**
	 * The default SQL template for the {@code sqlGetTablesVersion} property.
	 * The {@link #getTableName()} value is used in the pattern, e.g.
	 * {@code T-init.sql}.
	 */
	public static final String SQL_GET_TABLES_VERSION_TEMPLATE = "SELECT svalue FROM solarnode.modbus_server_meta WHERE skey = 'solarnode.%s.version'";

	/** The table name for {@link ModbusRegisterEntity} entities. */
	public static final String TABLE_NAME = "register";

	/** The charge point table version. */
	public static final int VERSION = 1;

	private final StatTracker stats;

	/**
	 * Enumeration of SQL resources.
	 */
	public enum SqlResource {

		/** Get a count of stored records. */
		Count("count"),

		/** Find records matching a server ID. */
		FindForServer("find-for-server"),

		;

		private final String resource;

		private SqlResource(String resource) {
			this.resource = resource;
		}

		/**
		 * Get the SQL resource name.
		 *
		 * @return the resource
		 */
		public String getResource() {
			return resource;
		}
	}

	/**
	 * Constructor.
	 */
	public JdbcModbusRegisterDao() {
		super(ModbusRegisterEntity.class, ModbusRegisterKey.class,
				ModbusRegisterEntityRowMapper.INSTANCE, "modbus_server_%s", TABLE_NAME, VERSION);
		setSqlGetTablesVersion(format(SQL_GET_TABLES_VERSION_TEMPLATE, getTableName()));
		setSqlResourcePrefix(TABLE_NAME);
		setUseAutogeneratedKeys(false);
		this.stats = new StatTracker("JdbcModbusRegisterDao", null, log, 100);
	}

	@Override
	public ModbusRegisterKey save(ModbusRegisterEntity entity) {
		ModbusRegisterKey result = super.save(entity);
		stats.increment(ModbusServerDaoStat.EntitiesUpdated);
		return result;
	}

	@Override
	protected Object[] primaryKeyArguments(ModbusRegisterKey id) {
		return new Object[] { id.getServerId(), (short) id.getUnitId(),
				(short) id.getBlockType().getCode(), id.getAddress() };
	}

	@Override
	protected void setUpdateStatementValues(ModbusRegisterEntity obj, PreparedStatement ps)
			throws SQLException {
		ps.setString(1, obj.getServerId());
		ps.setInt(2, obj.getUnitId());
		ps.setInt(3, obj.getBlockType().getCode());
		ps.setInt(4, obj.getAddress());
		ps.setTimestamp(5, Timestamp.from(obj.getCreated()));
		ps.setTimestamp(6, Timestamp.from(obj.getModified()));
		ps.setShort(7, obj.getValue());
	}

	@Override
	public FilterResults<ModbusRegisterEntity, ModbusRegisterKey> findFiltered(
			ModbusRegisterFilter filter, List<SortDescriptor> sorts, Long offset, Integer max) {
		Collection<ModbusRegisterEntity> results;
		if ( filter != null && filter.getServerId() != null ) {
			results = getJdbcTemplate().query(querySql(SqlResource.FindForServer.getResource(), sorts),
					getRowMapper(), filter.getServerId());
		} else {
			results = getAll(sorts);
		}
		return new BasicFilterResults<>(results);
	}

	@Override
	public String getSettingUid() {
		return "net.solarnetwork.node.io.modbus.server.jdbc";
	}

	@Override
	public String getDisplayName() {
		return "ModbusRegisterDao (JDBC)";
	}

	@Override
	public List<SettingSpecifier> getSettingSpecifiers() {
		return Collections.singletonList((SettingSpecifier) new BasicTitleSettingSpecifier("status",
				getStatusMessage(), true, true));
	}

	private String getStatusMessage() {
		// @formatter:off
		long rowCount = 0;
		try {
			rowCount = rowCount();
		} catch ( Exception e ) {
			log.warn("Error finding Modbus Server register row count.", e);
		}
		return getMessageSource().getMessage("status.msg",
				new Object[] {
						rowCount,
						stats.get(ModbusServerDaoStat.EntitiesUpdated),
						stats.get(ModbusServerDaoStat.EntitiesDeleted) },
				Locale.getDefault());
		// @formatter:on
	}

	private long rowCount() {
		final Number rowCountNum = getJdbcTemplate()
				.queryForObject(getSqlResource(SqlResource.Count.getResource()), Number.class);
		return (rowCountNum == null ? 0 : rowCountNum.longValue());
	}

	/**
	 * Get the statistics object.
	 *
	 * @return the statistics
	 */
	public StatTracker getStats() {
		return stats;
	}

}
