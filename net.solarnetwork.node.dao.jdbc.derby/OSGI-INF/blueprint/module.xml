<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgi="http://www.eclipse.org/gemini/blueprint/schema/blueprint"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint
		http://www.eclipse.org/gemini/blueprint/schema/blueprint/gemini-blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- Configuration -->
	
	<osgix:cm-properties id="dao.jdbc.derby.cfg" persistent-id="net.solarnetwork.node.dao.jdbc.derby">
		<beans:prop key="derby.maintenance.compress.cron">0 30 3 * * ?</beans:prop>
		<beans:prop key="derby.maintenance.compress.schemas">SOLARNODE</beans:prop>
		<beans:prop key="derby.maintenance.compress.timeout">300</beans:prop>
		<beans:prop key="job.syncBackup.cron">3 0 1 ? * WED</beans:prop>
		<beans:prop key="job.syncBackup.destinationPath">var/db-bak</beans:prop>
	</osgix:cm-properties>
	
	<ctx:property-placeholder properties-ref="dao.jdbc.derby.cfg"/>
	
	<!-- Service References -->
	
	<reference id="jdbcOps" interface="org.springframework.jdbc.core.JdbcOperations"
		filter="(db=node)"/>

	<!-- Published Services -->
	
	<service ref="compress" interface="net.solarnetwork.node.job.TriggerAndJobDetail"/>
	<service ref="syncBackup" interface="net.solarnetwork.node.job.TriggerAndJobDetail"/>
	
	<service ref="dbSystemService" interface="net.solarnetwork.node.dao.jdbc.DatabaseSystemService">
		<service-properties>
			<entry key="db" value="node"/>
		</service-properties>
	</service>

	<!-- Supporting services -->

	<bean id="dbSystemService" class="net.solarnetwork.node.dao.jdbc.derby.DerbyDatabaseSystemService">
		<property name="jdbcOperations" ref="jdbcOps"/>
		<property name="compressTablesService" ref="compressService"/>
	</bean>
	
	<bean class="net.solarnetwork.node.dao.jdbc.derby.DerbyCustomFunctionsInitializer" init-method="init">
		<property name="jdbcOperations" ref="jdbcOps"/>
	</bean>
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="net.solarnetwork.node.dao.jdbc.derby.JOBS"/>
	</bean>

	<!-- Table compression -->
	
	<bean id="compressService" class="net.solarnetwork.node.dao.jdbc.derby.DerbyFullCompressTablesService">
		<property name="jdbcOperations" ref="jdbcOps"/>
		<property name="schemaList" value="${derby.maintenance.compress.schemas}"/>
		<property name="maxSeconds" value="${derby.maintenance.compress.timeout}"/>
	</bean>

	<bean id="compress" class="net.solarnetwork.node.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="compressTrigger"/>
		<property name="jobDetail" ref="compressJob"/>
		<property name="messageSource" ref="messageSource"/>
	</bean>

	<bean id="compressTrigger" class="net.solarnetwork.node.job.RandomizedCronTriggerFactoryBean">
		<property name="jobDetail" ref="compressJob"/>
		<property name="cronExpression" value="${derby.maintenance.compress.cron}"/>
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
		<property name="randomSecond" value="true"/>
	</bean>

	<bean id="compressJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="net.solarnetwork.node.dao.jdbc.derby.TablesMaintenanceJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="maintenanceService" value-ref="compressService"/>
			</map>
		</property>
	</bean>

	<!-- Sync backup job -->

	<service ref="syncBackupService" interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.node.setup.SetupService).TOPIC_NETWORK_ASSOCIATION_ACCEPTED}</value>
					<value>#{T(net.solarnetwork.node.dao.SettingDao).EVENT_TOPIC_SETTING_CHANGED}</value>
					<value>#{T(net.solarnetwork.node.Constants).EVENT_TOPIC_CONFIGURATION_CHANGED}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<bean id="syncBackup" class="net.solarnetwork.node.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="syncBackupTrigger"/>
		<property name="jobDetail" ref="syncBackupJob"/>
		<property name="messageSource" ref="messageSource"/>
	</bean>

	<bean id="syncBackupTrigger" class="net.solarnetwork.node.job.RandomizedCronTriggerFactoryBean">
		<property name="jobDetail" ref="syncBackupJob"/>
		<property name="cronExpression" value="${job.syncBackup.cron}"/>
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
		<property name="randomSecond" value="true"/>
	</bean>
	
	<bean id="syncBackupService" class="net.solarnetwork.node.dao.jdbc.derby.DerbyOnlineSyncService"
		destroy-method="destroy">
		<property name="jdbcOperations" ref="jdbcOps"/>
		<property name="destinationPath" value="${job.syncBackup.destinationPath}"/>
	</bean>
	
	<bean id="syncBackupJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="net.solarnetwork.node.dao.jdbc.derby.DerbyOnlineSyncJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="syncService" value-ref="syncBackupService"/>
			</map>
		</property>
	</bean>

</blueprint>
