title = RFXCOM consumption

uid.key = Service Name
uid.desc = A unique name to identify this service with.

groupUID.key = Service Group
groupUID.desc = An optional group to include this service in.

rfxcomTracker.propertyFilters['UID'].key = Serial port
rfxcomTracker.propertyFilters['UID'].desc = The serial port to use for \
	communicating with the RFXCOM transceiver.

knownAddresses.key = Seen Devices
knownAddresses.desc = Displays a list of recognized RFXCOM device addresses that have been \
	seen so far. You can use this to help configure the address mapping settings.

addressSourceMappingValue.key = Address mapping
addressSourceMappingValue.desc = A key/value mapping of sensor addresses to \
	<code>sourceId</code> values. This can be used to consistently collect \
	data from sensors, even after the sensor has been reset and \
	it generates a new random address ID value for itself. The syntax is like \
	<b>addr = sourceId, addr2 = sourceId2, ...</b>.

sourceIdFilterValue.key = Source filter
sourceIdFilterValue.desc = A comma-delimited list of <code>sourceId</code> values to accept \
	data for, rejecting all others. Sometimes bogus data can be received \
	or some other sensor message not associated with this node might be received. \
	Configuring this field prevents data from sources other than those \
	configured here from being collected. Note the source values configured \
	here should be the values <em>after</em> any <b>addressSourceMapping</b> \
	translation has occurred.

collectAllSourceIds.key = Collect all sources
collectAllSourceIds.desc = If <em>true</em> then attempt to read values for all sources \
	configured in the <b>sourceIdFilter</b> property and return all the data collected. The \
	<b>collectAllSourceIdsTimeout</b> setting is used to limit the amount of time spent \
	collecting data, as there is no guarantee the application can read from all sources: \
	the sensor data is captured somewhat randomly.

collectAllSourceIdsTimeout.key = Collect all timeout
collectAllSourceIdsTimeout.desc = When <b>collectAllSourceIds</b> is configured as \
	<em>true</em> this is a timeout value, in seconds, the application should spend attempting to \
	collect data from all configured sources. If this amount of time is passed \
	before data for all sources has been collected, the application will give \
	up and just return whatever data it has collected at that point.

currentSensorIndexFlags.key = Current sensors selection
currentSensorIndexFlags.desc = The RFXCOM current datum supports up to 3 current sensors per \
	transmitter, numbered <b>1 - 3</b>. This setting \
	is a bitmask flag specifying which sensors to collect readings from. The amp sensors number \
	<b>1 - 3</b>. Enable reading each sensor number by adding together each number as \
	<code>2 ^ (sensorNumber - 1)</code>. Thus to read from sensor 1 configure this as <b>1</b>. To \
	read from all 3 sensors set this value to <b>7</b> (<code>2^0 + 2^1 + 2^2) = 7</code>).

maxWattHourWarmupVerificationDiff.key = Wh Verification Warmup Threshold
maxWattHourWarmupVerificationDiff.desc = A maximum Wh difference to allow between two reads of the \
	same source when this data source first starts collecting data. This threshold is used to prevent mangled \
	data from being captured accidentally. During the warmup period, the data is read from the RFXCOM \
	device and buffered in memory. Once enough data has been collected where the difference in Wh \
	between each datum is below this threshold, all the valid buffered data will be returned.

maxWattHourSpikeVerificationDiff.key = Wh Verification Spike Threshold
maxWattHourSpikeVerificationDiff.desc = A maximum Wh difference to allow between two reads of the \
	same source when this data source is not in its warmup period. If the Wh difference exceeds this \
	threshold, the data will be buffered in memory to allow verification of the data against subsequent \
	collected data, similar to the warmup period. Data that appears invalid will then be discarded.
