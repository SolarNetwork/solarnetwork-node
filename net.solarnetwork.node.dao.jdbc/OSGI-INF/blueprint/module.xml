<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- Configuration -->

	<osgix:cm-properties id="dao.jdbc.cfg"
		persistent-id="net.solarnetwork.node.dao.jdbc">
		<beans:prop key="DatabaseSetup.initSqlResource">classpath:/net/solarnetwork/node/dao/jdbc/derby-init.sql</beans:prop>
		<beans:prop key="reset.sqlStateRegex">900\d{2}</beans:prop>
		<beans:prop key="restoreFromBackup.exceptionThreshold">1</beans:prop>
		<beans:prop key="restoreFromBackup.secondsDelay">30</beans:prop>
		<beans:prop key="restoreFromBackup.resourceProviderFilter">net.solarnetwork.node.settings.ca.CASettingsService</beans:prop>
		<beans:prop key="restoreFromBackup.sqlStateRegex">XS(?!DB6).*</beans:prop>
		<beans:prop key="shutdown.sqlStateRegex">XSDB6</beans:prop>
		<beans:prop key="JdbcDatumDao.maxFetchForUpload">240</beans:prop>
		<beans:prop key="JdbcGeneralNodeDatumDao.initSqlResource">classpath:/net/solarnetwork/node/dao/jdbc/general/derby-generalnodedatum-init.sql</beans:prop>
		<beans:prop key="JdbcGeneralNodeDatumDao.sqlResourcePrefix">derby-generalnodedatum</beans:prop>
		<beans:prop key="JdbcSettingDao.sqlResourcePrefix">derby-settings</beans:prop>
		<beans:prop key="JdbcSecurityTokenDao.initSqlResource">classpath:/net/solarnetwork/node/dao/jdbc/sectok/derby-sectok-init.sql</beans:prop>
		<beans:prop key="JdbcSecurityTokenDao.sqlResourcePrefix">derby-sectok</beans:prop>
		<beans:prop key="job.generalNodeDatumCleaner.cron">35 0 0/2 ? * *</beans:prop>
		<beans:prop key="job.generalNodeDatumCleaner.uploadedTrimHours">4</beans:prop>
		<beans:prop key="job.generalNodeDatumTrimmer.cron">35 0 1/2 ? * *</beans:prop>
		<beans:prop key="job.generalNodeDatumTrimmer.trimMinutes">120</beans:prop>
		<beans:prop key="job.generalNodeDatumTrimmer.fileSystemUseThreshold">90</beans:prop>
		<beans:prop key="job.generalNodeDatumTrimmer.tableSizeThreshold">1048576</beans:prop>
	</osgix:cm-properties>

	<!-- Service References -->

	<reference id="dataSource" interface="javax.sql.DataSource" filter="(db=node)" />

	<bean id="eventAdmin" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext" />
		<property name="serviceClassName" value="org.osgi.service.event.EventAdmin" />
		<property name="sticky" value="true"/>
	</bean>
	
	<bean id="databaseSystemService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext" />
		<property name="serviceClassName" value="net.solarnetwork.node.dao.jdbc.DatabaseSystemService" />
		<property name="serviceFilter" value="(db=node)"/>
		<property name="sticky" value="true"/>
	</bean>

	<bean id="identityService" class="net.solarnetwork.common.osgi.service.DynamicServiceTracker">
		<argument ref="bundleContext" />
		<property name="serviceClassName" value="net.solarnetwork.node.service.IdentityService" />
		<property name="sticky" value="true"/>
	</bean>

	<reference id="taskExecutor" interface="org.springframework.core.task.TaskExecutor"
		filter="(function=node)"/>

	<!-- Published Services -->

	<service ref="settingDao" interface="net.solarnetwork.node.dao.SettingDao"
		depends-on="databaseSetup" />

	<service ref="jdbcTemplate" interface="org.springframework.jdbc.core.JdbcOperations">
		<service-properties>
			<entry key="db" value="node" />
		</service-properties>
	</service>

	<service ref="txManager"
		interface="org.springframework.transaction.PlatformTransactionManager"
		depends-on="databaseSetup">
		<service-properties>
			<entry key="db" value="node" />
		</service-properties>
	</service>

	<service ref="generalNodeDatumDao" ranking="1" depends-on="databaseSetup">
		<interfaces>
			<value>net.solarnetwork.node.dao.DatumDao</value>
			<value>net.solarnetwork.node.dao.jdbc.JdbcDao</value>
			<value>net.solarnetwork.service.PingTest</value>
			<value>net.solarnetwork.settings.SettingSpecifierProvider</value>
		</interfaces>
		<service-properties>
			<entry key="datumClassName" value="net.solarnetwork.node.domain.datum.NodeDatum" />
			<entry key="mode" value="direct" />
		</service-properties>
	</service>

	<service ref="securityTokenDao" ranking="1" depends-on="databaseSetup">
		<interfaces>
			<value>net.solarnetwork.node.dao.SecurityTokenDao</value>
			<value>net.solarnetwork.node.dao.jdbc.JdbcDao</value>
		</interfaces>
	</service>

	<!-- Supporting Services -->

	<ctx:property-placeholder properties-ref="dao.jdbc.cfg" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- PlatformTransactionManager: local JDBC transaction manager. -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<service id="restoreFromBackupHandler" interface="net.solarnetwork.dao.jdbc.SQLExceptionHandler">
		<bean
			class="net.solarnetwork.node.dao.jdbc.RestoreFromBackupSQLExceptionHandler">
			<argument ref="bundleContext" />
			<argument value="${restoreFromBackup.exceptionThreshold}" />
			<property name="restoreDelaySeconds" value="${restoreFromBackup.secondsDelay}" />
			<property name="backupResourceProviderFilter" value="${restoreFromBackup.resourceProviderFilter}" />
			<property name="sqlStateRegex" value="${restoreFromBackup.sqlStateRegex}" />
			<property name="identityService" ref="identityService"/>
		</bean>
	</service>

	<service id="shutdownHandler" interface="net.solarnetwork.dao.jdbc.SQLExceptionHandler">
		<bean class="net.solarnetwork.node.dao.jdbc.ShutdownSQLExceptionHandler">
			<property name="sqlStateRegex" value="${shutdown.sqlStateRegex}" />
		</bean>
	</service>

	<service interface="net.solarnetwork.dao.jdbc.SQLExceptionHandler">
		<bean class="net.solarnetwork.node.dao.jdbc.ResetSQLExceptionHandler">
			<property name="sqlStateRegex" value="${reset.sqlStateRegex}" />
		</bean>
	</service>

	<bean id="databaseSetup" class="net.solarnetwork.node.dao.jdbc.DatabaseSetup"
		init-method="init" depends-on="restoreFromBackupHandler shutdownHandler">
		<property name="dataSource" ref="dataSource" />
		<property name="initSqlResource" value="${DatabaseSetup.initSqlResource}" />
	</bean>

	<bean id="settingDao" class="net.solarnetwork.node.dao.jdbc.JdbcSettingDao">
		<property name="sqlResourcePrefix" value="${JdbcSettingDao.sqlResourcePrefix}" />
		<property name="dataSource" ref="dataSource" />
		<property name="eventAdmin" ref="eventAdmin" />
		<property name="transactionTemplate">
			<bean class="org.springframework.transaction.support.TransactionTemplate">
				<argument ref="txManager" />
			</bean>
		</property>
	</bean>

	<reference id="objectMapperService" 
		interface="net.solarnetwork.service.ObjectMapperService"
		filter="(function=node)"/>
		
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" 
		factory-ref="objectMapperService" factory-method="getObjectMapper"/>
	
	<!-- Use Java @Transactional annotations to declare transactions. -->
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="jobsMessageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="net.solarnetwork.node.dao.jdbc.general.JOBS" />
	</bean>
	
	<!-- Security Token DAO -->

	<bean id="securityTokenDao"
		class="net.solarnetwork.node.dao.jdbc.sectok.JdbcSecurityTokenDao"
		init-method="init">
		<property name="dataSource" ref="dataSource" />
		<property name="eventAdmin" ref="eventAdmin" />
		<property name="initSqlResource" value="${JdbcSecurityTokenDao.initSqlResource}" />
		<property name="sqlResourcePrefix" value="${JdbcSecurityTokenDao.sqlResourcePrefix}" />
	</bean>
	<!-- General Node Datum -->

	<bean id="generalNodeDatumDao"
		class="net.solarnetwork.node.dao.jdbc.general.JdbcGeneralNodeDatumDao"
		init-method="init">
		<property name="objectMapper" ref="objectMapper" />
		<property name="dataSource" ref="dataSource" />
		<property name="eventAdmin" ref="eventAdmin" />
		<property name="initSqlResource" value="${JdbcGeneralNodeDatumDao.initSqlResource}" />
		<property name="sqlResourcePrefix" value="${JdbcGeneralNodeDatumDao.sqlResourcePrefix}" />
		<property name="maxFetchForUpload" value="${JdbcDatumDao.maxFetchForUpload}" />
	</bean>
	
	<service interface="net.solarnetwork.node.job.ManagedJob">
		<service-properties>
			<entry key="service.pid" value="net.solarnetwork.node.dao.jdbc"/>
		</service-properties>
		<bean class="net.solarnetwork.node.job.SimpleManagedJob">
			<argument>
				<bean class="net.solarnetwork.node.job.DatumDaoCleanerJob">
					<argument ref="generalNodeDatumDao"/>
					<property name="uid" value="net.solarnetwork.node.dao.jdbc.clean"/>
					<property name="messageSource" ref="jobsMessageSource"/>
					<property name="hours" value="${job.generalNodeDatumCleaner.uploadedTrimHours}"/>
				</bean>
			</argument>
			<argument value="${job.generalNodeDatumCleaner.cron}"/>
			<property name="displayName" value="NodeDatumTableCleaner"/>
			<property name="scheduleSettingKey" value="job.generalNodeDatumCleaner.cron"/>
		</bean>
	</service>
	
	<service interface="net.solarnetwork.node.job.ManagedJob">
		<service-properties>
			<entry key="service.pid" value="net.solarnetwork.node.dao.jdbc"/>
		</service-properties>
		<bean class="net.solarnetwork.node.job.SimpleManagedJob">
			<argument>
				<bean class="net.solarnetwork.node.dao.jdbc.TimeBasedTableDiskSizeManager">
					<argument ref="jdbcTemplate"/>
					<property name="uid" value="net.solarnetwork.node.dao.jdbc.trim"/>
					<property name="messageSource" ref="jobsMessageSource"/>
					<property name="dbSystemService" ref="databaseSystemService"/>
					<property name="tableName" value="SN_GENERAL_NODE_DATUM"/>
					<property name="trimMinutes" value="${job.generalNodeDatumTrimmer.trimMinutes}"/>
					<property name="maxFileSystemUseThreshold" value="${job.generalNodeDatumTrimmer.fileSystemUseThreshold}"/>
					<property name="minTableSizeThreshold" value="${job.generalNodeDatumTrimmer.tableSizeThreshold}"/>
				</bean>
			</argument>
			<argument value="${job.generalNodeDatumTrimmer.cron}"/>
			<property name="displayName" value="NodeDatumTableTrimmer"/>
			<property name="scheduleSettingKey" value="job.generalNodeDatumTrimmer.cron"/>
		</bean>
	</service>

	<service interface="net.solarnetwork.node.backup.BackupResourceProvider">
		<bean class="net.solarnetwork.node.dao.jdbc.JdbcTableBackupResourceProvider">
			<argument>
				<bean class="org.springframework.jdbc.core.JdbcTemplate">
					<property name="dataSource" ref="dataSource"/>
				</bean>
			</argument>
			<argument>
				<bean class="org.springframework.transaction.support.TransactionTemplate">
					<argument ref="txManager"/>
				</bean>
			</argument>
			<argument ref="taskExecutor"/>
			<property name="tableNames">
				<list>
					<value>SOLARNODE.SN_GENERAL_NODE_DATUM</value>
				</list>
			</property>
			<property name="messageSource">
				<bean class="org.springframework.context.support.ResourceBundleMessageSource">
					<property name="basename" value="net.solarnetwork.node.dao.jdbc.JdbcTableBackupResourceProvider"/>
				</bean>
			</property>
		</bean>
	</service>
	
</blueprint>
