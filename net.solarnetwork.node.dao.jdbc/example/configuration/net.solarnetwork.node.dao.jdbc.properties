###############################################################################
# net.solarnetwork.node.dao.jdbc Configuration Admin properties
###############################################################################

###############################################################################
# restoreFromBackup.exceptionThreshold <integer>
# restoreFromBackup.secondsDelay <seconds>
# restoreFromBackup.resourceProviderFilter <comma-delimited list>
# 
# Settings to control when an automatic restore-from-backup is attempted.
# The exceptionThreshold property defines how many fatal SQL exceptions must be
# thrown before a restore is attempted. The secondsDelay property defines a
# number of seconds to delay the restore once the threshold has been met. The
# resourceProviderFilter property defines a comma-delimieted list of backup
# resource provider keys to limit the scope of the restore to. The 
# sqlStateRegex property is a comma-delimited list of SQL state regular
# expressions that must be matched for active-connection exceptions to trigger
# the restore from backup.

restoreFromBackup.exceptionThreshold = 1
restoreFromBackup.secondsDelay = 30
restoreFromBackup.resourceProviderFilter = net.solarnetwork.node.settings.ca.CASettingsService
restoreFromBackup.sqlStateRegex = XS(?!DB6).*

###############################################################################
# shutdown.exceptionThreshold <integer>
#
# A comma-delimited list of SQL state regular expressions that should trigger
# an immediate system shutdown.

shutdown.sqlStateRegex = XSDB6

###############################################################################
# jdbc.driver   <class name>
# jdbc.url      <jdbc url>
# jdbc.user     <jdbc username>
# jdbc.pass     <jdbc password>
# 
# The jdbc.* properties define the JDBC connection settings to use for the
# exported javax.sql.DataSource service. The defaults here are for an
# embedded Derby database.

jdbc.driver = org.apache.derby.jdbc.EmbeddedDriver
jdbc.url = jdbc:derby:solarnode;create=true
jdbc.user = solarnode
jdbc.pass = solarnode


###############################################################################
# jdbc.pool.maxIdle                       <integer>
# jdbc.pool.maxActive                     <integer>
# jdbc.pool.maxWait                       <milliseconds>
# jdbc.pool.timeBetweenEvictionRunsMillis <milliseconds>
# jdbc.pool.minEvictableIdleTimeMillis    <milliseconds>
# 
# The jdbc.pool.* properties define the JDBC connection pool settings to use
# for the exported javax.sql.DataSource service. The defaults here should be
# suitable for most cases.
# 
# The maxIdle property is the maximum number of "idle" connections to hold on
# to. The maxActive is the maximum number of active connections to allow,
# before new connection requests are blocked until a free connection becomes
# available. The maxWait is the maximum amount of time for blocked 
# connections to wait for a free connection before throwing an exception. The
# timeBetweenEvictionRunsMillis is the period at which the pool will look
# for idle connections it can evict. The minEvictableIdleTimeMillis is the
# minimum lenght of time a connection must be idle for before it can be
# evicted from the pool.

jdbc.pool.maxIdle = 0
jdbc.pool.maxActive = 3
jdbc.pool.maxWait = 20000
jdbc.pool.timeBetweenEvictionRunsMillis = 120000
jdbc.pool.minEvictableIdleTimeMillis = 300000
jdbc.pool.interceptors = ConnectionState;StatementCache(prepared=true,callable=true,max=50)
	


###############################################################################
# JdbcDatumDao.maxFetchForUpload <integer>
# 
# The maximum number of datum records to fetch at one time for uploading to 
# SolarNet. The higher the value the more memory that will be required.

JdbcDatumDao.maxFetchForUpload = 240


###############################################################################
# job.generalNodeDatumCleaner.cron <cron expression>
# job.generalNodeDatumCleaner.trimMinutes <minutes>
# 
# The cron expression to trim older general datum data when disk space is low.
# The trimMinutes property configures how many minutes of data to trim. The
# two values should be coordinated, so that data can be deleted fast enough to
# prevent the disk from filling.

job.generalNodeDatumTrimmer.cron = 35 0 1/2 ? * *
job.generalNodeDatumTrimmer.trimMinutes = 120


###############################################################################
# job.generalLocationDatumCleaner.cron <cron expression>
# job.generalLocationDatumCleaner.trimMinutes <minutes>
# 
# The cron expression to trim older general location data when disk space is low.
# The trimMinutes property configures how many minutes of data to trim. The
# two values should be coordinated, so that data can be deleted fast enough to
# prevent the disk from filling.

job.generalLocationDatumTrimmer.cron = 35 0 1/2 ? * *
job.generalLocationDatumTrimmer.trimMinutes = 120
