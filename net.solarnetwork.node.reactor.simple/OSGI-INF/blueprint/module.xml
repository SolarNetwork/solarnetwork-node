<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- Configuration -->
	
	<osgix:cm-properties id="cfg" persistent-id="net.solarnetwork.node.reactor.simple">
		<beans:prop key="job.instructionAcknowledgementUploader.cron">35 * * * * ?</beans:prop>
		<beans:prop key="job.instructionExecution.cron">0/10 * * * * ?</beans:prop>
		<beans:prop key="job.instructionExecution.executionReceivedHourLimit">24</beans:prop>
		<beans:prop key="job.instructionCleaner.cron">20 43 0 ? * TUE,THU,SUN</beans:prop>
		<beans:prop key="job.instructionCleaner.hours">72</beans:prop>
	</osgix:cm-properties>

	<!-- Service References -->

	<reference id="txManager" interface="org.springframework.transaction.PlatformTransactionManager"
		filter="(db=node)"/>
	
	<reference id="instructionDao"  availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionDao"/>
	
	<reference-list id="serializationServices" availability="optional" 
		interface="net.solarnetwork.node.reactor.ReactorSerializationService"/>
	
	<reference id="instructionAcknowledgementService" availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionAcknowledgementService"/>

	<reference-list id="instructionHandlers" availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionHandler"/>
	
	<!-- Published Services -->

	<service ref="simpleReactorService" ranking="1"
		interface="net.solarnetwork.node.reactor.ReactorService"/>

	<service ref="instructionAck" 
		interface="net.solarnetwork.node.job.TriggerAndJobDetail"/>

	<service ref="instructionExecution" 
		interface="net.solarnetwork.node.job.TriggerAndJobDetail"/>

	<service ref="instructionCleaner" 
		interface="net.solarnetwork.node.job.TriggerAndJobDetail"/>

	<!-- Supporting Services -->
	
	<ctx:property-placeholder properties-ref="cfg"/>

	<bean id="jobMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="net.solarnetwork.node.reactor.simple.JOBS"/>
	</bean>

	<bean id="simpleReactorService" class="net.solarnetwork.node.reactor.simple.SimpleReactorService">
		<property name="instructionDao" ref="instructionDao"/>
		<property name="serializationServices" ref="serializationServices"/>
	</bean>

	<!-- Use Java @Transactional annotations to declare transactions. -->
	<tx:annotation-driven transaction-manager="txManager"/>

	<!-- Instruction Acknowledgement job -->
	
	<bean id="instructionAck" class="net.solarnetwork.node.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="instructionAckTrigger"/>
		<property name="jobDetail" ref="instructionAckJob"/>
		<property name="messageSource" ref="jobMessageSource"/>
	</bean>
	
	<bean id="instructionAckTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="instructionAckJob"/>
		<property name="name" value="Instruction Acknowlegement Uploader"/>
		<property name="description" value="Post instruction acknowlegements back to the instructor"/>
		<property name="cronExpression" value="${job.instructionAcknowledgementUploader.cron}"/>
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
	</bean>
	
	<bean id="instructionAckJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="net.solarnetwork.node.reactor.InstructionAcknowledgeJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="instructionDao" value-ref="instructionDao"/>
				<entry key="instructionAcknowledgementService" value-ref="instructionAcknowledgementService"/>
			</map>
		</property>
	</bean>
	
	<!-- Instruction Execution job -->
	
	<bean id="instructionExecution" class="net.solarnetwork.node.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="instructionExecutionTrigger"/>
		<property name="jobDetail" ref="instructionExecutionJob"/>
		<property name="messageSource" ref="jobMessageSource"/>
	</bean>
	
	<bean id="instructionExecutionTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="instructionExecutionJob"/>
		<property name="name" value="Instruction Execution Job"/>
		<property name="description" value="Look for pending instructions to execute"/>
		<property name="cronExpression" value="${job.instructionExecution.cron}"/>
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
	</bean>
	
	<bean id="instructionExecutionJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="net.solarnetwork.node.reactor.InstructionExecutionJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="instructionDao" value-ref="instructionDao"/>
				<entry key="handlers" value-ref="instructionHandlers"/>
				<entry key="executionReceivedHourLimit" value="${job.instructionExecution.executionReceivedHourLimit}"/>
			</map>
		</property>
	</bean>
	
	<!-- Instruction Cleaner job -->
	
	<bean id="instructionCleaner" class="net.solarnetwork.node.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="instructionCleanerTrigger"/>
		<property name="jobDetail" ref="instructionCleanerJob"/>
		<property name="messageSource" ref="jobMessageSource"/>
	</bean>
	
	<bean id="instructionCleanerTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="instructionCleanerJob"/>
		<property name="name" value="Instruction Cleaner Job"/>
		<property name="description" value="Remove old instructions from the local cache"/>
		<property name="cronExpression" value="${job.instructionCleaner.cron}"/>
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
	</bean>
	
	<bean id="instructionCleanerJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="net.solarnetwork.node.reactor.InstructionCleanerJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="instructionDao" value-ref="instructionDao"/>
				<entry key="hours" value="${job.instructionCleaner.hours}"/>
			</map>
		</property>
	</bean>
	
</blueprint>
