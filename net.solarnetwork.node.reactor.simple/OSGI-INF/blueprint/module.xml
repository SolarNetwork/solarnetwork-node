<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- Configuration -->
	
	<osgix:cm-properties id="cfg" persistent-id="net.solarnetwork.node.reactor.simple">
		<beans:prop key="job.instructionAcknowledgementUploader.cron">35 * * * * ?</beans:prop>
		<beans:prop key="job.instructionExecution.cron">0/10 * * * * ?</beans:prop>
		<beans:prop key="job.instructionExecution.executionReceivedHourLimit">24</beans:prop>
		<beans:prop key="job.instructionExecution.incompleteHourLimit">168</beans:prop>
		<beans:prop key="job.instructionCleaner.cron">20 43 0 ? * TUE,THU,SUN</beans:prop>
		<beans:prop key="job.instructionCleaner.hours">72</beans:prop>
	</osgix:cm-properties>

	<!-- Service References -->

	<reference id="txManager" interface="org.springframework.transaction.PlatformTransactionManager"
		filter="(db=node)"/>
	
	<reference id="instructionDao"  availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionDao"/>
	
	<reference id="instructionAcknowledgementService" availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionAcknowledgementService"/>

	<reference-list id="instructionHandlers" availability="optional"
		interface="net.solarnetwork.node.reactor.InstructionHandler"/>
	
	<!-- Published Services -->

	<service ranking="1" ref="simpleReactorService">
		<interfaces>
			<value>net.solarnetwork.node.reactor.ReactorService</value>
			<value>net.solarnetwork.node.reactor.InstructionHandler</value>
		</interfaces>
		<service-properties>
			<entry key="instruction">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.node.reactor.InstructionHandler).TOPIC_CANCEL_INSTRUCTION}</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<service interface="net.solarnetwork.node.reactor.InstructionExecutionService" ref="instructionExecutionService"/>

	<!-- Supporting Services -->
	
	<ctx:property-placeholder properties-ref="cfg"/>

	<bean id="jobMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="net.solarnetwork.node.reactor.simple.JOBS"/>
	</bean>

	<bean id="simpleReactorService" class="net.solarnetwork.node.reactor.simple.SimpleReactorService">
		<argument ref="instructionDao"/>
	</bean>

	<!-- Use Java @Transactional annotations to declare transactions. -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<bean id="instructionExecutionService" class="net.solarnetwork.node.reactor.SimpleInstructionExecutionService">
		<argument ref="instructionHandlers"/>
		<property name="executionReceivedHourLimit" value="${job.instructionExecution.executionReceivedHourLimit}"/>
	</bean>
	
	<bean id="jobsMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="net.solarnetwork.node.reactor.simple.JOBS"/>
	</bean>
	
	<!-- Instruction Acknowledgement job -->
	
	<service interface="net.solarnetwork.node.job.ManagedJob">
		<service-properties>
			<entry key="service.pid" value="net.solarnetwork.node.reactor.simple"/>
		</service-properties>
		<bean class="net.solarnetwork.node.job.SimpleManagedJob">
			<argument>
				<bean class="net.solarnetwork.node.reactor.simple.InstructionAcknowledgeJob">
					<argument ref="instructionDao"/>
					<argument ref="instructionAcknowledgementService"/>
					<property name="uid" value="net.solarnetwork.node.reactor.simple.ack"/>
					<property name="messageSource" ref="jobsMessageSource"/>
				</bean>
			</argument>
			<argument value="${job.instructionAcknowledgementUploader.cron}"/>
			<property name="displayName" value="InstructionAcknowledgeJob"/>
			<property name="scheduleSettingKey" value="job.instructionAcknowledgementUploader.cron"/>
		</bean>
	</service>
	
	<!-- Instruction Execution job -->
	
	<service interface="net.solarnetwork.node.job.ManagedJob">
		<service-properties>
			<entry key="service.pid" value="net.solarnetwork.node.reactor.simple"/>
		</service-properties>
		<bean class="net.solarnetwork.node.job.SimpleManagedJob">
			<argument>
				<bean class="net.solarnetwork.node.reactor.simple.InstructionExecutionJob">
					<argument ref="instructionDao"/>
					<argument ref="instructionExecutionService"/>
					<property name="uid" value="net.solarnetwork.node.reactor.simple.exec"/>
					<property name="messageSource" ref="jobsMessageSource"/>
					<property name="maximumIncompleteHours" value="${job.instructionExecution.incompleteHourLimit}"/>
				</bean>
			</argument>
			<argument value="${job.instructionExecution.cron}"/>
			<property name="displayName" value="InstructionExecutionJob"/>
			<property name="scheduleSettingKey" value="job.instructionExecution.cron"/>
		</bean>
	</service>
	
	<!-- Instruction Cleaner job -->
	
	<service interface="net.solarnetwork.node.job.ManagedJob">
		<service-properties>
			<entry key="service.pid" value="net.solarnetwork.node.reactor.simple"/>
		</service-properties>
		<bean class="net.solarnetwork.node.job.SimpleManagedJob">
			<argument>
				<bean class="net.solarnetwork.node.reactor.simple.InstructionCleanerJob">
					<argument ref="instructionDao"/>
					<property name="hours" value="${job.instructionCleaner.hours}"/>
					<property name="uid" value="net.solarnetwork.node.reactor.simple.clean"/>
					<property name="messageSource" ref="jobsMessageSource"/>
				</bean>
			</argument>
			<argument value="${job.instructionCleaner.cron}"/>
			<property name="displayName" value="InstructionCleanerJob"/>
			<property name="scheduleSettingKey" value="job.instructionCleaner.cron"/>
		</bean>
	</service>
	
</blueprint>
