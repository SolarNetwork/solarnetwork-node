<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:ctx="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	
	<!-- Configuration -->

	<osgix:cm-properties id="core.cfg" persistent-id="net.solarnetwork.node.core">
		<beans:prop key="scheduler.startupDelay">180</beans:prop>
		<beans:prop key="taskScheduler.poolSize">2</beans:prop>
		<beans:prop key="jobScheduler.poolSize">10</beans:prop>
		<beans:prop key="job.backup.cron">0 3 0 ? * SAT</beans:prop>
		<beans:prop key="placeholders.dir">conf/placeholders.d</beans:prop>
	</osgix:cm-properties>

	<ctx:property-placeholder properties-ref="core.cfg"/>
	
	<!-- Service References -->

	<bean id="eventAdmin" class="net.solarnetwork.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext"/>
		<property name="serviceClassName" value="org.osgi.service.event.EventAdmin"/>
		<property name="sticky" value="true"/>
	</bean>
	
	<bean id="settingDao" class="net.solarnetwork.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.dao.SettingDao"/>
		<property name="sticky" value="true"/>
	</bean>

	<bean id="txManager" class="net.solarnetwork.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext"/>
		<property name="serviceClassName" value="org.springframework.transaction.PlatformTransactionManager"/>
		<property name="serviceFilter" value="(db=node)"/>
		<property name="sticky" value="true"/>
	</bean>

	<reference-list id="triggers" interface="net.solarnetwork.node.job.TriggerAndJobDetail" availability="optional">
		<reference-listener bind-method="onBind" unbind-method="onUnbind">
			<bean class="net.solarnetwork.node.runtime.JobServiceRegistrationListener">
				<property name="scheduler" ref="scheduler"/>
				<property name="bundleContext" ref="bundleContext"/>
			</bean>
		</reference-listener>
	</reference-list>

	<reference-list id="managedJobs" interface="net.solarnetwork.node.job.ManagedTriggerAndJobDetail" availability="optional">
		<reference-listener bind-method="onBind" unbind-method="onUnbind" ref="managedJobsListener"/>
	</reference-list>
	<bean id="managedJobsListener" class="net.solarnetwork.node.runtime.ManagedJobServiceRegistrationListener"
		destroy-method="finish">
		<property name="scheduler" ref="scheduler"/>
		<property name="bundleContext" ref="bundleContext"/>
	</bean>

	<reference-list id="serializers" availability="optional" filter="(!(delegating=true))"
		interface="net.solarnetwork.node.reactor.ReactorSerializationService"/>
	
	<reference-list id="backupServices" availability="optional"
		interface="net.solarnetwork.node.backup.BackupService"/>
	
	<reference-list id="backupResourceProviders" availability="optional"
		interface="net.solarnetwork.node.backup.BackupResourceProvider"/>
	
	<!-- 
		Track CloseableService instances so they can be released automatically;
		this is useful because the destroy-method Blueprint property is not 
		available on nested bean elements (e.g. prototype beans). To work around
		that for services that would like to have a "destroy" hook, they can
		publish themselves as a net.solarnetwork.util.CloseableService. 
	 -->
	<reference-list availability="optional" interface="net.solarnetwork.util.CloseableService">
		<reference-listener unbind-method="onReleased">
			<bean class="net.solarnetwork.util.CloseableServiceTracker"/>
		</reference-listener>
	</reference-list>
	
	<reference-list id="sampleTransformers" availability="optional"
		interface="net.solarnetwork.node.domain.GeneralDatumSamplesTransformer"/>
		
	<!-- Provide a centralized ObjectMapper for JSON processing. -->
	<service interface="net.solarnetwork.util.ObjectMapperService">
		<service-properties>
			<entry key="function" value="node"/>
		</service-properties>
		<bean class="net.solarnetwork.util.SimpleObjectMapperService">
			<property name="objectMapper" ref="objectMapper"/>
		</bean>
	</service>
	<bean id="objectMapper" class="net.solarnetwork.util.ObjectMapperFactoryBean" >
		<property name="serializers">
			<list>
				<bean class="net.solarnetwork.codec.JodaDateTimeSerializer"/>
				<bean class="net.solarnetwork.codec.JodaLocalDateSerializer"/>
				<bean class="net.solarnetwork.codec.JodaLocalDateTimeSerializer"/>
				<bean class="net.solarnetwork.codec.JodaLocalTimeSerializer"/>
				<bean class="net.solarnetwork.codec.BasicObjectDatumStreamMetadataSerializer"/>
				<bean class="net.solarnetwork.codec.BasicGeneralDatumSerializer"/>
			</list>
		</property>
		<property name="deserializers">
			<list>
				<bean class="net.solarnetwork.codec.BasicObjectDatumStreamMetadataDeserializer"/>
				<bean class="net.solarnetwork.codec.BasicGeneralDatumDeserializer"/>
			</list>
		</property>
		<property name="featuresToDisable">
			<list>
				<value>#{T(com.fasterxml.jackson.databind.DeserializationFeature).FAIL_ON_UNKNOWN_PROPERTIES}</value>
			</list>
		</property>
	</bean>

	<service ref="scheduler" interface="org.quartz.Scheduler">
		<service-properties>
			<entry key="function" value="node"/>
		</service-properties>
	</service>
	
	<service ref="taskScheduler">
		<interfaces>
			<value>org.springframework.scheduling.TaskScheduler</value>
			<value>org.springframework.scheduling.SchedulingTaskExecutor</value>
		</interfaces>
		<service-properties>
			<entry key="function" value="node"/>
		</service-properties>
	</service>
	
	<service ref="taskExecutor">
		<interfaces>
			<value>org.springframework.core.task.AsyncListenableTaskExecutor</value>
			<value>org.springframework.core.task.AsyncTaskExecutor</value>
			<value>org.springframework.core.task.TaskExecutor</value>
			<value>java.util.concurrent.Executor</value>
		</interfaces>
		<service-properties>
			<entry key="function" value="node"/>
		</service-properties>
	</service>
	
	<service ref="delegatingReactorSerialization" ranking="5"
		interface="net.solarnetwork.node.reactor.ReactorSerializationService">
		<service-properties>
			<entry key="delegating" value="true"/>
		</service-properties>
	</service>
	
	<service ref="fsBackupService" interface="net.solarnetwork.node.backup.BackupService"/>
	
	<service ref="backupManager">
		<interfaces>
			<value>net.solarnetwork.node.backup.BackupManager</value>
			<value>net.solarnetwork.node.settings.SettingSpecifierProvider</value>
		</interfaces>
	</service>
	
	<service ref="backupJob" 
		interface="net.solarnetwork.node.job.TriggerAndJobDetail"/>
		
	<service interface="net.solarnetwork.node.backup.BackupResourceProvider">
		<bean class="net.solarnetwork.node.backup.FileBackupResourceProvider">
			<osgix:managed-properties 
				persistent-id="net.solarnetwork.node.backup.FileBackupResourceProvider" 
				autowire-on-update="true"/>
			<property name="messageSource">
				<bean class="org.springframework.context.support.ResourceBundleMessageSource">
					<property name="basename" value="net.solarnetwork.node.backup.FileBackupResourceProvider"/>
				</bean>
			</property>
		</bean>
	</service>
	
	<service interface="net.solarnetwork.node.setup.SetupResourceService">
		<bean class="net.solarnetwork.node.setup.SimpleSetupResourceService">
			<property name="setupResourceProviders">
				<reference-list availability="optional" interface="net.solarnetwork.node.setup.SetupResourceProvider"/>
			</property>
		</bean>
	</service>
	
	<reference-list id="datumXformServices" interface="net.solarnetwork.node.GeneralDatumSamplesTransformService" 
		filter="(!(role=global))" availability="optional"/>
	
	<!-- 
		Global GeneralDatumSamplesTransformService that applies all available 
		GeneralDatumSamplesTransformer services at runtime. This special GeneralDatumSamplesTransformService
		serves as a "applicable to all persisted datum" transform service.
	 -->
	<bean id="globalTransformService" class="net.solarnetwork.node.support.GeneralDatumSamplesTransformChain">
		<osgix:managed-properties persistent-id="net.solarnetwork.node.datum.xform.solarin" autowire-on-update="true"/>
		<argument value="net.solarnetwork.node.datum.xform.solarin"/>
		<argument ref="datumXformServices"/>
		<argument value="false"/>
		<argument>
			<bean class="net.solarnetwork.node.support.SimpleGeneralDatumSamplesTransformService">
				<property name="sampleTransformers" ref="sampleTransformers"/>
			</bean>
		</argument>
		<property name="sampleTransformers" ref="sampleTransformers"/>
		<property name="uid" value="SolarIn"/>
		<property name="messageSource">
			<bean class="org.springframework.context.support.ResourceBundleMessageSource">
				<property name="basenames">
					<list>
						<value>net.solarnetwork.node.support.SolarInGeneralDatumSamplesTransformChain</value>
						<value>net.solarnetwork.node.support.BaseSamplesTransformSupport</value>
					</list>
				</property>
			</bean>
		</property>			
	</bean>
	<service ranking="10" ref="globalTransformService">
		<interfaces>
			<value>net.solarnetwork.node.GeneralDatumSamplesTransformService</value>
			<value>net.solarnetwork.node.settings.SettingSpecifierProvider</value>
		</interfaces>
		<service-properties>
			<entry key="role">
				<array value-type="java.lang.String">
					<value>global</value>
					<value>datum-filter</value>
				</array>
			</entry>
		</service-properties>
	</service>
	
	<!-- User Datum Filter Chain factory -->	
	<bean id="userDatumFilterChainMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>net.solarnetwork.node.support.UserGeneralDatumSamplesTransformChain</value>
				<value>net.solarnetwork.node.support.BaseSamplesTransformSupport</value>
				<value>net.solarnetwork.node.support.BaseIdentifiable</value>
			</list>
		</property>
	</bean>
	
	<service interface="net.solarnetwork.node.settings.SettingSpecifierProviderFactory">
		<service-properties>
			<entry key="role">
				<array value-type="java.lang.String">
					<value>user</value>
					<value>datum-filter</value>
				</array>
			</entry>
		</service-properties>
		<bean class="net.solarnetwork.node.settings.support.BasicSettingSpecifierProviderFactory">
			<property name="displayName" value="Datum Filter Chain"/>
			<property name="factoryUID" value="net.solarnetwork.node.datum.xform.user"/>
			<property name="messageSource" ref="userDatumFilterChainMessageSource"/>
		</bean>
	</service>
	
	<osgix:managed-service-factory factory-pid="net.solarnetwork.node.datum.xform.user" autowire-on-update="true">
		<osgix:interfaces>
			<beans:value>net.solarnetwork.node.GeneralDatumSamplesTransformService</beans:value>
			<beans:value>net.solarnetwork.node.settings.SettingSpecifierProvider</beans:value>
		</osgix:interfaces>
		<osgix:service-properties>
			<beans:entry key="settingPid" value="net.solarnetwork.node.datum.xform.user"/>
			<beans:entry key="role">
				<beans:array value-type="java.lang.String">
					<beans:value>user</beans:value>
					<beans:value>datum-filter</beans:value>
				</beans:array>
			</beans:entry>
		</osgix:service-properties>
		<bean class="net.solarnetwork.node.support.GeneralDatumSamplesTransformChain">
			<argument value="net.solarnetwork.node.datum.xform.user"/>
			<argument ref="datumXformServices"/>
			<argument value="true"/>
			<argument><null/></argument>
			<property name="messageSource" ref="userDatumFilterChainMessageSource"/>
			<property name="opModesService" ref="opModesService"/>
		</bean>
	</osgix:managed-service-factory>

	<!-- Platform package service -->	
	<service interface="net.solarnetwork.node.PlatformPackageService">
		<bean class="net.solarnetwork.node.support.NativeTarPlatformPackageService">
			<property name="taskExecutor">
				<bean class="net.solarnetwork.util.StaticOptionalService">
					<argument ref="taskExecutor"/>
				</bean>
			</property>
		</bean>
	</service>
	
	<!-- Quartz scheduler for scheduling all jobs -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="applicationContextSchedulerContextKey" value="applicationContext"/>
		<property name="waitForJobsToCompleteOnShutdown" value="true"/>
		<property name="startupDelay" value="${scheduler.startupDelay}"/>
		<property name="schedulerName" value="SolarNode"/>
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.threadCount">${jobScheduler.poolSize}</prop>
			</props>
		</property>
		<property name="jobFactory">
			<bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
		</property>
	</bean>
	
	<!-- Task scheduler for simple repeating tasks -->
	<bean id="taskScheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
		<property name="poolSize" value="${taskScheduler.poolSize}"/>
		<property name="threadNamePrefix" value="SolarNode-TaskScheduler-"/>	
		<property name="removeOnCancelPolicy" value="true"/>
	</bean>
	
	<!-- Task executor for simple tasks -->
	<bean id="executorService" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool" destroy-method="shutdown">
		<argument value="#{T(java.lang.Runtime).getRuntime().availableProcessors() + 1}"/>
		<argument>
			<bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
				<argument value="SolarNode-Core-"/>
			</bean>
		</argument>
	</bean>

	<bean id="taskExecutor" class="org.springframework.core.task.support.TaskExecutorAdapter">
		<argument ref="executorService"/>
	</bean>
		
	<bean id="delegatingReactorSerialization" 
		class="net.solarnetwork.node.reactor.support.DelegatingReactorSerialization">
		<property name="serializers" ref="serializers"/>
	</bean>
	
	<bean id="backupManager" class="net.solarnetwork.node.backup.DefaultBackupManager" init-method="init">
		<osgix:managed-properties 
			persistent-id="net.solarnetwork.node.backup.DefaultBackupManager" 
			autowire-on-update="true"/>
		<property name="backupServices" ref="backupServices"/>
		<property name="resourceProviders" ref="backupResourceProviders"/>
	</bean>

	<bean id="fsBackupService" class="net.solarnetwork.node.backup.FileSystemBackupService">
		<osgix:managed-properties 
			persistent-id="net.solarnetwork.node.backup.FileSystemBackupService" 
			autowire-on-update="true"/>
		<property name="messageSource">
			<bean class="org.springframework.context.support.ResourceBundleMessageSource">
				<property name="basename" value="net.solarnetwork.node.backup.FileSystemBackupService"/>
			</bean>
		</property>
		<property name="identityService">
			<bean class="net.solarnetwork.util.DynamicServiceTracker">
				<property name="bundleContext" ref="bundleContext"/>
				<property name="serviceClassName" value="net.solarnetwork.node.IdentityService"/>
			</bean>	
		</property>
	</bean>

	<!-- Jobs -->

	<bean id="jobMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="net.solarnetwork.node.JOBS"/>
	</bean>

	<bean id="backupJob" class="net.solarnetwork.node.job.SimpleTriggerAndJobDetail">
		<property name="trigger">
			<bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
				<property name="name" value="backupTrigger"/>
				<property name="description" value="Backup node configuration data."/>
				<property name="cronExpression" value="${job.backup.cron}"/>
				<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
			</bean>
		</property>
		<property name="jobDetail">
			<bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
				<property name="name" value="backupJob"/>
				<property name="jobClass" value="net.solarnetwork.node.job.BackupJob"/>
				<property name="jobDataAsMap">
					<map>
						<entry key="backupManager" value-ref="backupManager"/>
					</map>
				</property>
			</bean>
		</property>
		<property name="messageSource" ref="jobMessageSource"/>
	</bean>
	
	<!-- Messaging -->

	<bean id="messageSendingOperations" class="net.solarnetwork.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext"/>
		<property name="serviceClassName" value="org.springframework.messaging.simp.SimpMessageSendingOperations"/>
		<property name="serviceFilter" value="(channel=broker)"/>
		<property name="sticky" value="true"/>
	</bean>

	<service interface="org.osgi.service.event.EventHandler">
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<beans:array value-type="java.lang.String">
					<beans:value>net/solarnetwork/node/*</beans:value>
				</beans:array>
			</entry>
		</service-properties>
		<bean class="net.solarnetwork.node.runtime.EventMessageBridge">
			<argument ref="messageSendingOperations"/>
		</bean>
	</service>
	
	<!-- PlatformService -->

	<service interface="net.solarnetwork.node.PlatformService">
		<bean class="net.solarnetwork.node.runtime.DefaultPlatformService">
			<property name="eventAdmin" ref="eventAdmin"/>
			<property name="messageSendingOperations" ref="messageSendingOperations"/>
		</bean>
	</service>
	
	<!-- OperationalModesService -->

	<service ref="opModesService">
		<interfaces>
			<value>net.solarnetwork.node.OperationalModesService</value>
			<value>net.solarnetwork.node.reactor.InstructionHandler</value>
			<value>net.solarnetwork.node.settings.SettingSpecifierProvider</value>
		</interfaces>
	</service>
	<bean id="opModesService" class="net.solarnetwork.node.runtime.DefaultOperationalModesService" init-method="init" destroy-method="close">
		<argument ref="settingDao"/>
		<argument ref="eventAdmin"/>
		<property name="taskScheduler" ref="taskScheduler"/>
		<property name="transactionManager" ref="txManager"/>
			<property name="messageSource">
				<bean class="org.springframework.context.support.ResourceBundleMessageSource">
					<property name="basename" value="net.solarnetwork.node.runtime.DefaultOperationalModesService"/>
				</bean>
			</property>			
	</bean>
	
	<!-- PlaceholderService -->
	
	<service interface="net.solarnetwork.node.PlaceholderService">
		<bean class="net.solarnetwork.node.support.SettingsPlaceholderService">
			<argument ref="settingDao"/>
			<property name="staticPropertiesPath" value="${placeholders.dir}"/>
			<property name="taskExecutor" ref="taskExecutor"/>
		</bean>
	</service>
	
	<!-- User Metadata Service -->
	
	<bean id="userMetadataMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>net.solarnetwork.node.support.UserMetadataService</value>
				<value>net.solarnetwork.node.support.BaseIdentifiable</value>
			</list>
		</property>
	</bean>
	
	<bean id="setupService" class="net.solarnetwork.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext"/>
		<property name="serviceClassName" value="net.solarnetwork.node.setup.SetupService"/>
		<property name="sticky" value="true"/>
	</bean>
	
	<service interface="net.solarnetwork.node.settings.SettingSpecifierProviderFactory">
		<bean class="net.solarnetwork.node.settings.support.BasicSettingSpecifierProviderFactory">
			<property name="displayName" value="User Metadata Service"/>
			<property name="factoryUID" value="net.solarnetwork.node.metadata.user"/>
			<property name="messageSource" ref="userMetadataMessageSource"/>
		</bean>
	</service>

	<osgix:managed-service-factory factory-pid="net.solarnetwork.node.metadata.user" 
			autowire-on-update="true" update-method="configurationChanged">
		<osgix:interfaces>
			<beans:value>net.solarnetwork.node.MetadataService</beans:value>
			<beans:value>net.solarnetwork.node.settings.SettingSpecifierProvider</beans:value>
		</osgix:interfaces>
		<osgix:service-properties>
			<beans:entry key="settingPid" value="net.solarnetwork.node.metadata.user"/>
		</osgix:service-properties>
		<bean class="net.solarnetwork.node.support.UserMetadataService">
			<argument ref="setupService"/>
			<property name="objectMapper" ref="objectMapper"/>
			<property name="messageSource" ref="userMetadataMessageSource"/>
		</bean>
	</osgix:managed-service-factory>
	
	<service>
		<interfaces>
			<value>net.solarnetwork.node.DatumService</value>
			<value>net.solarnetwork.node.reactor.FeedbackInstructionHandler</value>
			<value>org.osgi.service.event.EventHandler</value>
		</interfaces>
		<service-properties>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.node.DatumDataSource).EVENT_TOPIC_DATUM_CAPTURED}</value>
				</array>
			</entry>
			<entry key="instruction">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.node.reactor.InstructionHandler).TOPIC_SYSTEM_CONFIGURE}</value>
				</array>
			</entry>
		</service-properties>
		<bean class="net.solarnetwork.node.runtime.DefaultDatumService">
			<argument>
				<bean class="org.springframework.util.AntPathMatcher" >
					<property name="cachePatterns" value="true"/>
					<property name="caseSensitive" value="false"/>
				</bean>
			</argument>
			<argument ref="objectMapper"/>
		</bean>
	</service>
	
	<!-- 
		DatumQueue: serialized processing of captured datum.
		
		This queue serves as sort of serial queue for captured datum across all of SolarNode.
		For Datum to be added to the queue, processed, and then persisted (i.e. for SolarIn)
		we publish DatumDao services of rank 1000 that add datum to the queue insted of 
		persisting them directly. Once processed, those datum are then 
	 -->
	<bean id="datumQueue" class="net.solarnetwork.node.runtime.DefaultDatumQueue" init-method="startup" destroy-method="shutdown">
		<osgix:managed-properties persistent-id="net.solarnetwork.node.runtime.dq" autowire-on-update="true"/>
		<argument>
			<bean class="net.solarnetwork.node.dao.SampleTransformingGeneralNodeDatumDao">
				<argument>
					<bean class="net.solarnetwork.util.DynamicServiceTracker">
						<property name="bundleContext" ref="bundleContext"/>
						<property name="serviceClassName" value="net.solarnetwork.node.dao.DatumDao"/>
						<property name="serviceFilter" value="(&amp;(!(queue=true))(datumClassName=net.solarnetwork.node.domain.GeneralNodeDatum))"/>
						<property name="sticky" value="true"/>
					</bean>
				</argument>
				<argument ref="globalTransformServiceOptional"/>
			</bean>
		</argument>
		<argument>
			<bean class="net.solarnetwork.node.dao.SampleTransformingGeneralLocationDatumDao">
				<argument>
					<bean class="net.solarnetwork.util.DynamicServiceTracker">
						<property name="bundleContext" ref="bundleContext"/>
						<property name="serviceClassName" value="net.solarnetwork.node.dao.DatumDao"/>
						<property name="serviceFilter" value="(&amp;(!(queue=true))(datumClassName=net.solarnetwork.node.domain.GeneralLocationDatum))"/>
						<property name="sticky" value="true"/>
					</bean>
				</argument>
				<argument ref="globalTransformServiceOptional"/>
			</bean>
		</argument>
		<argument value="true"/>
		<property name="messageSource">
			<bean class="org.springframework.context.support.ResourceBundleMessageSource">
				<property name="basenames">
					<list>
						<value>net.solarnetwork.node.runtime.DefaultDatumQueue</value>
					</list>
				</property>
			</bean>
		</property>
		<property name="transformService">
			<bean class="net.solarnetwork.util.DynamicServiceTracker">
				<property name="bundleContext" ref="bundleContext"/>
				<property name="serviceClassName" value="net.solarnetwork.node.GeneralDatumSamplesTransformService"/>
				<property name="serviceFilter" value="(!(role=global))"/>
				<property name="ignoreEmptyPropertyFilterValues" value="false"/>
				<property name="propertyFilters">
					<map>
						<entry key="uid" value=""/>
					</map>
				</property>
				<property name="sticky" value="true"/>
			</bean>
		</property>
	</bean>
	
	<bean id="globalTransformServiceOptional" class="net.solarnetwork.util.StaticOptionalService">
		<argument ref="globalTransformService"/>
	</bean>
	
	<service ref="datumQueue">
		<interfaces>
			<value>net.solarnetwork.node.DatumQueue</value>
			<value>net.solarnetwork.node.settings.SettingSpecifierProvider</value>
			<value>org.osgi.service.event.EventHandler</value>
		</interfaces>
		<service-properties>
			<entry key="datumClassName" value="net.solarnetwork.node.domain.GeneralDatum"/>
			<entry key="#{T(org.osgi.service.event.EventConstants).EVENT_TOPIC}">
				<array value-type="java.lang.String">
					<value>#{T(net.solarnetwork.node.DatumDataSource).EVENT_TOPIC_DATUM_CAPTURED}</value>
				</array>
			</entry>
			<entry key="role">
				<array value-type="java.lang.String">
					<value>global</value>
					<value>datum-filter</value>
				</array>
			</entry>
		</service-properties>
	</service>

	<!-- 
		DatumDao that offers datum to DatumQueue for serialzied processing.
		This has a high ranking so it is preferred by default for all DatumDataSource jobs.
	 -->	
	<service ranking="1000" interface="net.solarnetwork.node.dao.DatumDao">
		<service-properties>
			<entry key="datumClassName">
				<array value-type="java.lang.String">
					<value>net.solarnetwork.node.domain.GeneralLocationDatum</value>
					<value>net.solarnetwork.node.domain.GeneralNodeDatum</value>
				</array>
			</entry>
			<entry key="upload" value="false"/>
			<entry key="queue" value="true"/>
		</service-properties>
		<bean class="net.solarnetwork.node.dao.QueueGeneralDatumDao">
			<argument ref="datumQueue"/>
			<argument value="true"/>
		</bean>
	</service>

</blueprint>
