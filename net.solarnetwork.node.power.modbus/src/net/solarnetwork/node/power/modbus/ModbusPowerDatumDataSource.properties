title = Modbus Power Generation

addressesValue.key = Modbus addresses
addressesValue.desc = The list of starting Modbus register addresses, as hexidecimal \
	integers, to read values from. The total addresses to read from is combined \
	with the <b>Read count</b> property, so for example an address <code>F</code> \
	with a <b>Read count</b> of <code>3</code> results in addresses \
	<code>F, 11, 12</code> being read.

count.key = Read count
count.desc = The count of addresses to read, as a decimal integer.

sourceId.key = Source ID
sourceId.desc = A unique name to give to this specific device. If you have more than \
	one device, you should give each of them a unique Source ID value, for example \
	<em>Main</em>, <em>Secondary</em>, <em>1</em>, <em>2</em>, etc.

groupUID.key = Service Group
groupUID.desc = An optional group to include this service in.

registerMappingValue.key = Register mapping
registerMappingValue.desc = A key/value mapping of Modbus hexidecimal addresses to \
	<code>PowerDatum</code> property names. Each key represents a Modbus \
	address whose register value will be read and then stored on the \
	mapped property on a <code>PowerDatum</code> object. The syntax is like \
	<b>addr = propertyName, addr2 = propertyName2, ...</b>.

registerScaleFactorValue.key = Register scale mapping
registerScaleFactorValue.desc = A key/value mapping of Modbus hexidecimal addresses to \
	decimal scale numbers. Each key represents a Modbus \
	address whose register value will be read and then multiplied by the \
	associated scale factor. The syntax is like \
	<b>addr = scale, addr2 = scale2, ...</b>.

hiLoRegisterMappingValue.key = Long word register mapping
hiLoRegisterMappingValue.desc = A key/value mapping of Modbus hexidecimal addresses to \
	<code>PowerDatum</code> property names. Each key represents a Modbus \
	address whose register value will be read as a "high" word value, \
	along with the <b>next higher</b> Modbus address as a "low" word value, the \
	words joined together to form a single 32-bit long word value, and the \
	final result stored on the mapped property on a <code>PowerDatum</code> \
	object. The syntax is like \
	<b>addr = propertyName, addr2 = propertyName2, ...</b>.

addressesToOffsetDailyValue.key = Daily offset addresses
addressesToOffsetDailyValue.desc = If configured, a set of Modbus hexidecimal addresses to treat as \
	ever-accumulating numbers that should be treated as daily-resetting values. This \
	can be used, for example, to calculate a "kWh generated today" value from a \
	register that is not reset by the device itself. When \
	reading values on the start of a new day, the value of that address is persisted \
	so subsequent readings on the same day can be calculated as an offset from \
	that initial value.


